{#
  // codegen-metadata
  // output_path: ARQLib/ARQGrpc/src/rd_entity_grpc_converters.cpp
#}
// THIS FILE IS AUTO-GENERATED BY THE CODE-GEN SCRIPT. DO NOT EDIT.
// Contains function definitions to convert between RDEntity structs and their gRPC representations.

#include <ARQGrpc/rd_entity_grpc_converters.h>

namespace ARQ
{
namespace Grpc
{
namespace RefData
{

{% for entity in entities %}
// --- Converters for {{ entity.name }} ({{ entity.type_string }}) ---

void toGrpc( const RDEntities::{{ entity.name }}& arqEntity, {{ entity.name }}* const grpcEntity )
{
    grpcEntity->set__is_active( arqEntity._isActive );
    grpcEntity->set__last_updated_ts( arqEntity._lastUpdatedTs.microsecondsSinceEpoch() );
    grpcEntity->set__last_updated_by( arqEntity._lastUpdatedBy );
    grpcEntity->set__version( arqEntity._version );
    {{ entity.name }}Payload* const payload = grpcEntity->mutable_payload();
    toGrpcPayload( arqEntity, payload );
}

void toGrpc( RDEntities::{{ entity.name }}&& arqEntity, {{ entity.name }}* const grpcEntity )
{
    grpcEntity->set__is_active( arqEntity._isActive );
    grpcEntity->set__last_updated_ts( arqEntity._lastUpdatedTs.microsecondsSinceEpoch() );
    grpcEntity->set__last_updated_by( std::move( arqEntity._lastUpdatedBy ) );
    grpcEntity->set__version( arqEntity._version );
    {{ entity.name }}Payload* const payload = grpcEntity->mutable_payload();
    toGrpcPayload( arqEntity, payload );
}

void toGrpcPayload( const RDEntities::{{ entity.name }}& arqEntity, {{ entity.name }}Payload* const grpcEntityPayload )
{
    {% for member in entity.members %}
    {% if member.type == "datetime" %}
    grpcEntityPayload->set_{{ member.name | snake_case }}( arqEntity.{{ member.name }}.microsecondsSinceEpoch() );
    {% else %}
    grpcEntityPayload->set_{{ member.name | snake_case }}( arqEntity.{{ member.name }} );
    {% endif %}
    {% endfor %}
}

void toGrpcPayload( RDEntities::{{ entity.name }}&& arqEntity, {{ entity.name }}Payload* const grpcEntityPayload )
{
    {% for member in entity.members %}
    {% if member.type == "datetime" %}
    grpcEntityPayload->set_{{ member.name | snake_case }}( arqEntity.{{ member.name }}.microsecondsSinceEpoch() );
    {% elif member.type == "string" %}
    grpcEntityPayload->set_{{ member.name | snake_case }}( std::move( arqEntity.{{ member.name }} ) );
    {% else %}
    grpcEntityPayload->set_{{ member.name | snake_case }}( arqEntity.{{ member.name }} );
    {% endif %}
    {% endfor %}
}

RDEntities::{{ entity.name }} fromGrpc( const {{ entity.name }}& grpcEntity )
{
    const {{ entity.name }}Payload& payload = grpcEntity.payload();
    RDEntities::{{ entity.name }} arqEntity = fromGrpcPayload( payload );
    arqEntity._isActive = grpcEntity._is_active();
    arqEntity._lastUpdatedTs = Time::DateTime( Time::Microseconds( grpcEntity._last_updated_ts() ) );
    arqEntity._lastUpdatedBy = grpcEntity._last_updated_by();
    arqEntity._version = grpcEntity._version();
    return arqEntity;
}

RDEntities::{{ entity.name }} fromGrpc( {{ entity.name }}&& grpcEntity )
{
    {{ entity.name }}Payload* const payload = grpcEntity.mutable_payload();
    RDEntities::{{ entity.name }} arqEntity = fromGrpcPayload( std::move( *payload ) );
    arqEntity._isActive = grpcEntity._is_active();
    arqEntity._lastUpdatedTs = Time::DateTime( Time::Microseconds( grpcEntity._last_updated_ts() ) );
    arqEntity._lastUpdatedBy = std::move( *grpcEntity.mutable__last_updated_by() );
    arqEntity._version = grpcEntity._version();
    return arqEntity;
}

RDEntities::{{ entity.name }} fromGrpcPayload( const {{ entity.name }}Payload& grpcEntityPayload )
{
    RDEntities::{{ entity.name }} arqEntity;
    {% for member in entity.members %}
    {% if member.type == "datetime" %}
    arqEntity.{{ member.name }} = Time::DateTime( Time::Microseconds( grpcEntityPayload.{{ member.name | snake_case }}() ) );
    {% else %}
    arqEntity.{{ member.name }} = grpcEntityPayload.{{ member.name | snake_case }}();
    {% endif %}
    {% endfor %}
    return arqEntity;
}

RDEntities::{{ entity.name }} fromGrpcPayload( {{ entity.name }}Payload&& grpcEntityPayload )
{
    RDEntities::{{ entity.name }} arqEntity;
    {% for member in entity.members %}
    {% if member.type == "datetime" %}
    arqEntity.{{ member.name }} = Time::DateTime( Time::Microseconds( grpcEntityPayload.{{ member.name | snake_case }}() ) );
    {% elif member.type == "string" %}
    arqEntity.{{ member.name }} = std::move( *grpcEntityPayload.mutable_{{ member.name | snake_case }}() );
    {% else %}
    arqEntity.{{ member.name }} = grpcEntityPayload.{{ member.name | snake_case }}();
    {% endif %}
    {% endfor %}
    return arqEntity;
}

{% endfor %}
}
}
}