{#
  // codegen-metadata
  // output_path: ARQLib/ARQSerialisation/src/ser_refdata_entities.cpp
#}
// THIS FILE IS AUTO-GENERATED BY THE CODE-GEN SCRIPT. DO NOT EDIT.
// Defines functions for Reference Data serialisation.

#include <ARQSerialisation/ser_refdata_entities.h>

#include <ARQUtils/time.h>

#include <flatbuffers/flatbuffers.h>

namespace ARQ
{

{% for entity in entities %}
// --- Implementation for {{ entity.name }} ---

RDEntities::{{ entity.name }} deserialise{{ entity.name }}( const fbs::{{entity.name}}Payload& payload )
{
    RDEntities::{{ entity.name }} obj = {
		payload.isActive(),
        Time::DateTime(),
		"",
        0,
        {% for member in entity.members %}
        {% if types[member.type].flatbuffer == "string" %}
        payload.{{ member.name }}()->c_str(){% if not loop.last %},{% endif %}
        {% else %}
        payload.{{ member.name }}(){% if not loop.last %},{% endif %}
        {% endif %}

        {% endfor %}
    };

    return obj;
}

Buffer serialise{{ entity.name }}( const RDEntities::{{ entity.name }}& entity )
{
    flatbuffers::FlatBufferBuilder builder;
    flatbuffers::Offset<void> payloadOffset;

    {% for member in entity.members %}
    {% if types[member.type].flatbuffer == "string" %}
    const auto {{ member.name }}Offset = builder.CreateString( entity.{{ member.name }} );
    {% endif %}
    {% endfor %}

    payloadOffset = fbs::Create{{ entity.name }}Payload(
        builder,
        {% for member in entity.members %}
        {% if types[member.type].flatbuffer == "string" %}
        {{ member.name }}Offset,
        {% else %}
        entity.{{ member.name }},
        {% endif %}
        {% endfor %}
        entity._isActive
    ).Union();

    auto rootTable = fbs::CreateRefDataUpdate(
        builder,
        fbs::AllRefDataPayloads_{{ entity.name }}Payload,
        payloadOffset
    );

    builder.Finish( rootTable );
    const uint8_t* const buffer = builder.GetBufferPointer();
    const size_t size = builder.GetSize();
    return Buffer( buffer, size );
}

{% endfor %}
}