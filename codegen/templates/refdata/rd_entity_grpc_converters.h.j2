{#
  // codegen-metadata
  // output_path: ARQLib/ARQGrpc/inc/rd_entity_grpc_converters.h
#}
// THIS FILE IS AUTO-GENERATED BY THE CODE-GEN SCRIPT. DO NOT EDIT.
// Contains function declarations to convert between RDEntity structs and their gRPC representations.

#pragma once

#include <ARQCore/refdata_entities.h>

#include <proto_gen/refdata_protobuf.grpc.pb.h>

namespace ARQ
{
namespace Grpc
{
namespace RefData
{
// TODO: Add tests

{% for entity in entities %}
// --- Converters for {{ entity.name }} ({{ entity.type_string }}) ---

void toGrpc( const RDEntities::{{ entity.name }}& arqEntity, {{ entity.name }}* const grpcEntity );
void toGrpc( RDEntities::{{ entity.name }}&& arqEntity, {{ entity.name }}* const grpcEntity );
void toGrpcPayload( const RDEntities::{{ entity.name }}& arqEntity, {{ entity.name }}Payload* const grpcEntityPayload );
void toGrpcPayload( RDEntities::{{ entity.name }}&& arqEntity, {{ entity.name }}Payload* const grpcEntityPayload );

[[nodiscard]] RDEntities::{{ entity.name }} fromGrpc( const {{ entity.name }}& grpcEntity );
[[nodiscard]] RDEntities::{{ entity.name }} fromGrpc( {{ entity.name }}&& grpcEntity );
[[nodiscard]] RDEntities::{{ entity.name }} fromGrpcPayload( const {{ entity.name }}Payload& grpcEntityPayload );
[[nodiscard]] RDEntities::{{ entity.name }} fromGrpcPayload( {{ entity.name }}Payload&& grpcEntityPayload );

{% endfor %}
}
}
}