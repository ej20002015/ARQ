{#
  // codegen-metadata
  // output_path: TMQLib/TMQCore/inc/refdata_manager.h
#}
// THIS FILE IS AUTO-GENERATED BY THE CODE-GEN SCRIPT. DO NOT EDIT.
// Contains the RefDataManager class and its cache for Reference Data entities.

#pragma once
#include <TMQCore/dll.h>

#include <TMQUtils/hashers.h>
#include <TMQCore/refdata_entities.h>
#include <TMQCore/logger.h>
#include <TMQCore/refdata_source.h>

#include <map>
#include <functional>
#include <optional>

namespace TMQ
{

class RefDataManager;

template<typename KeyType, RDEntities::c_RDEntity T>
class RefDataCache
{
public:
    explicit RefDataCache( const std::map<KeyType, T>&& map )
        : m_map( std::move( map ) )
    {}

    [[nodiscard]] std::optional<std::reference_wrapper<const T>> get( const KeyType& id ) const
    {
        const auto it = m_map.find( id );
        if( it == m_map.end() )
            return std::nullopt;

        return std::cref( it->second );
    }

private:
    std::map<KeyType, T> m_map;

    friend class RefDataManager;
};

class RefDataManager
{
public:

    enum StaleCheck
    {
        NONE = 0,
        USING_CACHE,
        USING_DB
    };

public:
    RefDataManager( const std::shared_ptr<RefDataSource>& source = nullptr )
	    : m_rdSource( source ? source : GlobalRefDataSource::get() )
    {}

    {% for entity in entities %}
    // --- Methods for {{ entity.name }} ({{ entity.type_string }}) ---

    [[nodiscard]] TMQCore_API bool has{{ entity.name_plural }}() const;

    [[nodiscard]] TMQCore_API std::shared_ptr<RefDataCache<RDEntities::Traits<RDEntities::{{ entity.name }}>::KeyType, RDEntities::{{ entity.name }}>> {{ entity.name_plural }}() const;

    TMQCore_API void reload{{ entity.name_plural }}();

    TMQCore_API void insert{{ entity.name_plural }}( const std::vector<RDEntities::{{ entity.name }}>& data, const StaleCheck staleCheck = USING_CACHE );
    TMQCore_API void insert{{ entity.name }}( const RDEntities::{{ entity.name }}& data, const StaleCheck staleCheck = USING_CACHE );

    {% endfor %}
private:
    {% for entity in entities %}
    // --- Methods for {{ entity.name }} ({{ entity.type_string }}) ---
    void loadInitially{{ entity.name_plural }}();

    {% endfor %}
private:
    std::shared_ptr<RefDataSource> m_rdSource;
    mutable std::shared_mutex m_mut;

    {% for entity in entities %}
    std::shared_ptr<RefDataCache<RDEntities::Traits<RDEntities::{{ entity.name }}>::KeyType, RDEntities::{{ entity.name }}>> m_{{ entity.name_plural }};
    {% endfor %}
};

}