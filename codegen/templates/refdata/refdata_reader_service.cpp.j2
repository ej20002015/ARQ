{#
  // codegen-metadata
  // output_path: services/RefData/RefDataReader/src/refdata_reader_service.cpp
#}
// THIS FILE IS AUTO-GENERATED BY THE CODE-GEN SCRIPT. DO NOT EDIT.
// Contains gRPC service class implementation for Reference Data Reader.

#include "refdata_reader_service.h"

#include <ARQGrpc/rd_entity_grpc_converters.h>

namespace ARQ
{
namespace Grpc
{
namespace RefData
{

{% for entity in entities %}
// --- Methods for {{ entity.name }} ({{ entity.type_string }}) ---

grpc::Status RefDataReaderServiceImpl::Get{{ entity.name_plural }}( grpc::ServerContext* context, const Get{{ entity.name_plural }}Request* request, Get{{ entity.name_plural }}Response* response )
{
    try
    {
        std::vector<RDEntities::{{ entity.name }}> entities = m_rdSource->fetch{{ entity.name_plural }}();
        for( auto&& entity : entities )
        {
            {{ entity.name }}* const protoEntity = response->add_{{ entity.name_plural | snake_case }}();
            toGrpc( std::move( entity ), protoEntity );
        }
    }
    catch( const ARQException& e )
    {
        return grpc::Status( grpc::StatusCode::INTERNAL, std::format( "Error in RefDataReaderServiceImpl::Get{{ entity.name_plural }}: {}", e.what() ) );
    }

    return grpc::Status::OK;
}

grpc::Status RefDataReaderServiceImpl::Get{{ entity.name }}( grpc::ServerContext* context, const Get{{ entity.name }}Request* request, Get{{ entity.name }}Response* response )
{
    try
    {
        std::optional<RDEntities::{{ entity.name }}> optEntity = m_rdSource->fetch{{ entity.name }}( request->{{ entity.key | snake_case }}() );
        if( optEntity.has_value() )
        {
            response->set_found( true );
            {{ entity.name }}* const protoEntity = response->mutable_{{ entity.name | snake_case }}();
            toGrpc( std::move( *optEntity ), protoEntity );
        }
        else
        {
            response->set_found( false );
            response->set_message( std::format( "{{ entity.name }} with {{ entity.key }}={} not found in refdata source", request->{{ entity.key | snake_case }}() ) );
        }
    }
    catch( const ARQException& e )
    {
        return grpc::Status( grpc::StatusCode::INTERNAL, std::format( "Error in RefDataReaderServiceImpl::Get{{ entity.name }}: {}", e.what() ) );
    }

    return grpc::Status::OK;
}

{% endfor %}
}
}
}