{#
  // codegen-metadata
  // output_path: ARQLib/ARQGrpc/src/refdata_grpc_clients.h
#}
// THIS FILE IS AUTO-GENERATED BY THE CODE-GEN SCRIPT. DO NOT EDIT.
// Contains gRPC client stub definitions for Reference Data services.

#pragma once

#include <ARQCore/refdata_entities.h>

#include <proto_gen/refdata_protobuf.grpc.pb.h>

#include <grpc++/grpc++.h>

namespace ARQ
{
namespace Grpc
{
namespace RefData
{

class RefDataReaderClient
{
public:
    RefDataReaderClient( std::shared_ptr<grpc::Channel> channel )
        : m_stub( RefDataReader::NewStub( channel ) )
    {
    }

    {% for entity in entities %}
    // --- Methods for {{ entity.name }} ({{ entity.type_string }}) ---
    std::vector<RDEntities::{{ entity.name }}> get{{ entity.name_plural }}();
    std::optional<RDEntities::{{ entity.name }}> get{{ entity.name }}( const RDEntities::Traits<RDEntities::{{ entity.name }}>::KeyType& {{ entity.key }} );

    {% endfor %}
private:
    std::unique_ptr<RefDataReader::Stub> m_stub;
};

class RefDataGatekeeperClient
{
public:
    RefDataGatekeeperClient( std::shared_ptr<grpc::Channel> channel )
        : m_stub( RefDataGatekeeper::NewStub( channel ) )
    {
    }

    {% for entity in entities %}
    // --- Methods for {{ entity.name }} ({{ entity.type_string }}) ---
    void upsert{{ entity.name_plural }}( const std::vector<RDEntities::{{ entity.name }}>& data );
    using Deactivate{{ entity.name }}Data = std::pair<RDEntities::Traits<RDEntities::{{ entity.name }}>::KeyType /* key */, uint32_t /* version */>;
    void deactivate{{ entity.name_plural }}( const std::vector<Deactivate{{ entity.name }}Data>& data );

    {% endfor %}
private:
    std::unique_ptr<RefDataGatekeeper::Stub> m_stub;
};

}
}
}