{#
  // codegen-metadata
  // output_path: services/RefData/RefDataGatekeeper/src/refdata_gatekeeper_service.h
#}
// THIS FILE IS AUTO-GENERATED BY THE CODE-GEN SCRIPT. DO NOT EDIT.
// Contains gRPC service class for Reference Data Gatekeeper.

#pragma once

#include <ARQUtils/error.h>
#include <ARQCore/refdata_source.h>

#include <proto_gen/refdata_protobuf.grpc.pb.h>

#include "version_manager.h"

namespace ARQ
{
namespace Grpc
{
namespace RefData
{

class RefDataGatekeeperServiceImpl final : public RefDataGatekeeper::Service
{
public:
    RefDataGatekeeperServiceImpl() = default;

    void init();

    {% for entity in entities %}
    // --- Methods for {{ entity.name }} ({{ entity.type_string }}) ---
    grpc::Status Upsert{{ entity.name_plural }}( grpc::ServerContext* context, const Upsert{{ entity.name_plural }}Request* request, Upsert{{ entity.name_plural }}Response* response ) override;
    grpc::Status Deactivate{{ entity.name_plural }}( grpc::ServerContext* context, const Deactivate{{ entity.name_plural }}Request* request, Deactivate{{ entity.name_plural }}Response* response ) override;

    {% endfor %}
private:
    template<typename UpsertTraits>
    grpc::Status UpsertGeneric( grpc::ServerContext* context, const typename UpsertTraits::RequestType* request, typename UpsertTraits::ResponseType* response );

private:
    // For now, write directly to a data source instead of writing to a kafka log
    std::shared_ptr<RefDataSource> m_rdSource = RefDataSourceFactory::create( "ClickHouseDB" );
    std::shared_ptr<VersionManager> m_verMgr;
};

}
}
}