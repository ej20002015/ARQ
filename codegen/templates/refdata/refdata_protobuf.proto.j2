{#
  // codegen-metadata
  // output_path: proto/refdata_protobuf.proto
#}
// THIS FILE IS AUTO-GENERATED BY THE CODE-GEN SCRIPT. DO NOT EDIT.
// Contains protobuf definitions for reference data structures and services.

syntax = "proto3";
package ARQ.Grpc.RefData;

/*
================== Entity Payload Messages ==================
*/

{% for entity in entities %}
// Payload for a {{ entity.name }} object (entity minus the metadata).
message {{ entity.name }}Payload 
{
    {% for member in entity.members %}
    {{ types[member.type].protobuf }} {{ member.name | snake_case }} = {{ loop.index }};
    {% endfor %}
}

// A {{ entity.name }} object (contains metadata).
message {{ entity.name }} 
{
    {{ entity.name }}Payload payload = 1;

    bool _is_active = 2;
    uint32 _version = 3;
    uint64 _last_updated_ts = 4; // Using uint64 for timestamp (nanoseconds since epoch)
    string _last_updated_by = 5;
}

{% endfor %}

/*
================== Service Messages ==================
*/

{% for entity in entities %}
// --- Messages for {{ entity.name }} ({{ entity.type_string }}) ---

message Get{{ entity.name_plural }}Request {}

message Get{{ entity.name_plural }}Response
{
    repeated {{ entity.name }} {{ entity.name_plural | snake_case }} = 1;
}

message Get{{ entity.name }}Request 
{
    {{ types[entity.key_type].protobuf }} {{ entity.key | snake_case }} = 1;
}

message Get{{ entity.name }}Response 
{
    bool found = 1;
    string message = 2; // Optional message, e.g. for not found reason

    {{ entity.name }} {{ entity.name | snake_case }} = 3;
}

message Upsert{{ entity.name_plural }}Request
{
    message Item
    {
        // The full data for the {{ entity.name }} being created or updated.
        {{ entity.name }}Payload {{ entity.name | snake_case }} = 1;

        // The version the client thinks it's modifying.
        // For a new {{ entity.name }}, this should be 0.
        uint32 expected_version = 2;

        // TEMP: The user performing the update. Will be replaced by auth token metadata later on the server side.
        string updated_by = 3;
    }

    repeated Item items = 1;
}

message Upsert{{ entity.name_plural }}Response
{
    message Item
    {
        bool success = 1;
        string message = 2;
    }

    // Overall success/failure of the batch operation.
    bool success = 1;
    string message = 2;

    // A list of results, one for each item in the request, in the same order.
    repeated Item items = 3;
}

message Deactivate{{ entity.name_plural }}Request
{
    message Item
    {
        // We only need the ID of the {{ entity.name }} to deactivate it.
        {{ types[entity.key_type].protobuf }} {{ entity.key | snake_case }} = 1;

        // The version the client thinks it's modifying.
        uint32 expected_version = 2;

        // TEMP: The user performing the update. Will be replaced by auth token metadata later on the server side.
        string updated_by = 3;
    }

    // A list of deactivate requests to process in a batch.
    repeated Item items = 1;
}

message Deactivate{{ entity.name_plural }}Response
{
    message Item
    {
        bool success = 1;
        string message = 2;
    }

    // Overall success/failure of the batch operation.
    bool success = 1;
    string message = 2;

    // A list of results, one for each item in the request, in the same order.
    repeated Item items = 3;
}

{% endfor %}

/*
================== Service Definitions ==================
*/

// The service that handles all read-only queries.
service RefDataReader
{
    {% for entity in entities %}
    // --- Methods for {{ entity.name }} ({{ entity.type_string }}) ---
    rpc Get{{ entity.name_plural }}(Get{{ entity.name_plural }}Request) returns (Get{{ entity.name_plural }}Response);
    rpc Get{{ entity.name }}(Get{{ entity.name }}Request) returns (Get{{ entity.name }}Response);

    {% endfor %}
}

// The service that handles all write/modification commands.
service RefDataGatekeeper
{
    {% for entity in entities %}
    // --- Methods for {{ entity.name }} ({{ entity.type_string }}) ---
    rpc Upsert{{ entity.name_plural }}(Upsert{{ entity.name_plural }}Request) returns (Upsert{{ entity.name_plural }}Response);
    rpc Deactivate{{ entity.name_plural }}(Deactivate{{ entity.name_plural }}Request) returns (Deactivate{{ entity.name_plural }}Response);

    {% endfor %}
}