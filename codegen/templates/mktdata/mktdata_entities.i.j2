{#
  // codegen-metadata
  // output_path: ARQLib/SWIG/ARQCore/mktdata_entities.i
#}
// THIS FILE IS AUTO-GENERATED BY THE CODE-GEN SCRIPT. DO NOT EDIT.
// SWIG interface file for Market Data entities

#ifndef mktdata_entities_i
#define mktdata_entities_i

%include <stdint.i>
%include <std_string.i>
%include <std_string_view.i>
%include <std_vector.i>
%include "../ARQUtils/time.i"

%{
#include <ARQCore/mktdata_entities.h>

#include <ARQUtils/time.h>
#include <ARQUtils/core.h>
%}

#ifdef SWIGCSHARP
%nspacemove(ARQ::MDEntities) std::vector<ARQ::MDEntities::MemberInfo>;
#endif

#ifdef SWIGPYTHON
%rename(MDEntities_MDEntity) ARQ::MDEntities::MDEntity;
%rename(MDEntities_Type) ARQ::MDEntities::Type;
%rename(MDEntities_Type_to_str) ARQ::MDEntities::typeToStr;
%rename(MDEntities_MemberInfo) ARQ::MDEntities::MemberInfo;
    %rename(cpp_type) ARQ::MDEntities::MemberInfo::cppType;
    %rename(clickhouse_type) ARQ::MDEntities::MemberInfo::clickhouseType;
    %rename(flatbuffer_type) ARQ::MDEntities::MemberInfo::flatbufferType;
{% for entity in entities %}
%rename(MDEntities_{{ entity.name }}) ARQ::MDEntities::{{ entity.name }};
    %rename(type_enum) ARQ::MDEntities::{{ entity.name }}::typeEnum;
    %rename(table_name) ARQ::MDEntities::{{ entity.name }}::tableName;
    %rename(get_members_info) ARQ::MDEntities::{{ entity.name }}::getMembersInfo;
    %rename(get_member_info) ARQ::MDEntities::{{ entity.name }}::getMemberInfo;
{% endfor %}
%rename(MDEntities_MemberInfoVec) std::vector<ARQ::MDEntities::MemberInfo>;
#endif

namespace std
{
    %template(MemberInfoVec) std::vector<ARQ::MDEntities::MemberInfo>;
};

#ifdef SWIGCSHARP
#define SWIG_STD_OPTIONAL_USE_NULLABLE_REFERENCE_TYPES
%include "../csharp/std_optional.i"
#endif
#ifdef SWIGPYTHON
%include "../python/std_optional.i"
#endif

%optional(ARQ::MDEntities::MemberInfo);

namespace ARQ
{
namespace MDEntities
{

/*
*************************************************
* Common functionality for Market Data Entities *
*************************************************
*/

// Base struct for all market data entities
struct MDEntity
{
    bool _isActive = true;
    Time::DateTime _lastUpdatedTs;
    std::string _lastUpdatedBy;

    /// The unique identifier for the market data entity.
	std::string ID;
    /// The source of the market data.
	std::string source;
    /// The point-in-time when the market data was effective.
	Time::DateTime asofTs;
};

enum class Type
{
    {% for entity in entities %}
    {{ entity.type_string }},
    {% endfor %}
};

std::string_view typeToStr( const Type type );

struct MemberInfo
{
    /// Name of the C++ member variable
    std::string_view name;
    /// Documentation string
    std::string_view comment;
    /// The language agnostic type as a string
    std::string_view type;
    /// The C++ type as a string
    std::string_view cppType;
    /// The ClickHouse type as a string
    std::string_view clickhouseType;
    /// The FlatBuffers type as a string
    std::string_view flatbufferType;
};

/*
********************************************
*            Entity Definitions            *
********************************************
*/

{# We loop over each entity defined in the TOML file #}
{% for entity in entities %}

/// {{ entity.comment | default('Represents ' + entity.name + ' reference data.') }}
struct {{ entity.name }} : public MDEntity
{
    {# Loop over the members of the current entity #}
    {% for member in entity.members -%}
    {% if member.comment %}    /// {{ member.comment }}
    {% endif %}
    {{ types[member.type].cpp }} {{ member.name }};
    {% endfor %}
};

// Extend {{ entity.name }} with SWIG-friendly static methods that wrap the constexpr Traits<{{ entity.name }}>
%extend {{ entity.name }}
{
    static std::string_view name() { return ARQ::MDEntities::Traits<ARQ::MDEntities::{{ entity.name }}>::name(); }
    static std::string_view type() { return ARQ::MDEntities::Traits<ARQ::MDEntities::{{ entity.name }}>::type(); }
    static ARQ::MDEntities::Type typeEnum() { return ARQ::MDEntities::Traits<ARQ::MDEntities::{{ entity.name }}>::typeEnum(); }
    static std::string_view tableName() { return ARQ::MDEntities::Traits<ARQ::MDEntities::{{ entity.name }}>::tableName(); }
    static const std::vector<ARQ::MDEntities::MemberInfo>& getMembersInfo()
    {
        static std::vector<ARQ::MDEntities::MemberInfo> membersInfo;
        if( membersInfo.empty() )
        {
            for( const auto& info : ARQ::MDEntities::Traits<ARQ::MDEntities::{{ entity.name }}>::membersInfo )
                membersInfo.push_back( info );
        }
        return membersInfo;
    }
    static std::optional<ARQ::MDEntities::MemberInfo> getMemberInfo( const std::string_view memberName )
    {
        return ARQ::MDEntities::Traits<ARQ::MDEntities::{{ entity.name }}>::getMemberInfo( memberName );
    }
}

{% endfor %}

}
}

#endif