{#
  // codegen-metadata
  // output_path: TMQLib/TMQMarket/inc/market.h
#}
// THIS FILE IS AUTO-GENERATED BY THE CODE-GEN SCRIPT. DO NOT EDIT.
// Defines the Market and MarketSnapshot classes, which hold market data entities.

#pragma once
#include <TMQMarket/dll.h>

#include <TMQUtils/hashers.h>
#include <TMQUtils/time.h>
#include <TMQCore/mktdata_entities.h>

#include <unordered_map>
#include <shared_mutex>

namespace TMQ
{
namespace Mkt
{

struct Name
{
	std::string tag;
	Time::Date date;

	Name() = default;
	Name( const std::string_view tag, const Time::Date date = Time::Date() )
		: tag( tag )
		, date( date )
	{}

	std::string str() const;

	TMQMarket_API static const Name LIVE;
};

template<MDEntities::c_MDEntity T>
using MktObjMap = std::unordered_map<std::string, T, TransparentStringHash, std::equal_to<>>;

template<MDEntities::c_MDEntity T>
class MktObjStore
{
public:
	MktObjStore() = default;

	[[nodiscard]] std::optional<T> get( const std::string_view ID ) const
	{
		std::shared_lock<std::shared_mutex> sl( m_mut );

		const auto it = m_objects.find( ID );
		if( it == m_objects.end() )
			return std::nullopt;

		return it->second;
	}

	void set( const T& obj )
	{
		std::unique_lock<std::shared_mutex> ul( m_mut );

		m_objects[obj.ID] = obj;
	}

    void set( T&& obj )
	{
		std::unique_lock<std::shared_mutex> ul( m_mut );

		m_objects[obj.ID] = std::move( obj );
	}

	size_t size() const noexcept
	{
		std::shared_lock<std::shared_mutex> sl( m_mut );

		return m_objects.size();
	}

	MktObjMap<T> objMap() const
	{
		std::shared_lock<std::shared_mutex> sl( m_mut );

		return m_objects;
	}

    void setObjMap( const MktObjMap<T>& newMap )
    {
        std::unique_lock<std::shared_mutex> ul( m_mut );

        m_objects = newMap;
    }

private:
	MktObjMap<T> m_objects;
	mutable std::shared_mutex m_mut;
};

class MarketSnapshot;

class Market
{
public:
	Market() = default;
    explicit TMQMarket_API Market( const MarketSnapshot& mktSnapshot );

    {% for entity in entities %}
    // --- Methods for {{ entity.name }} ({{ entity.type_string }}) ---

    [[nodiscard]] std::optional<MDEntities::{{ entity.name }}> get{{ entity.name }}( const std::string_view ID ) const
    {
        std::shared_lock<std::shared_mutex> sl( m_mut );
        return m_{{ entity.name_plural }}.get( ID );
    }

    void set{{ entity.name }}( const MDEntities::{{ entity.name }}& newObj )
    {
        std::shared_lock<std::shared_mutex> sl( m_mut );
        m_{{ entity.name_plural }}.set( newObj );
    }

    void set{{ entity.name }}( MDEntities::{{ entity.name }}&& newObj )
    {
        std::shared_lock<std::shared_mutex> sl( m_mut );
        m_{{ entity.name_plural }}.set( std::move( newObj ) );
    }

    {% endfor %}

    // --- Misc Methods ---

	[[nodiscard]] TMQMarket_API MarketSnapshot snap() const;

private:
    // TODO
    // Time::Date m_date; // The date of the market - what to do for the live market?
	mutable std::shared_mutex m_mut;

    {% for entity in entities %}
    MktObjStore<MDEntities::{{ entity.name }}> m_{{ entity.name_plural }};
    {% endfor %}
};

class MarketSnapshot
{
public:
    {% for entity in entities %}
    // --- Methods for {{ entity.name }} ({{ entity.type_string }}) ---

    [[nodiscard]] std::optional<MDEntities::{{ entity.name }}> get{{ entity.name }}( const std::string_view ID ) const
    {
        return get<MDEntities::{{ entity.name }}>( m_{{ entity.name_plural }}, ID );
    }

    [[nodiscard]] MktObjMap<MDEntities::{{ entity.name }}> getAll{{ entity.name_plural }}() const
    {
        return m_{{ entity.name_plural }};
    }

    {% endfor %}
private:
	// Only a Market can create a MarketSnapshot
	MarketSnapshot() = default;
	friend class Market;

	template<MDEntities::c_MDEntity T>
	[[nodiscard]] std::optional<T> get( const MktObjMap<T>& objMap, const std::string_view ID ) const
	{
		const auto it = objMap.find( ID );
		if( it == objMap.end() )
			return std::nullopt;

		return it->second;
	}

private:
	{% for entity in entities %}
    MktObjMap<MDEntities::{{ entity.name }}> m_{{ entity.name_plural }};
    {% endfor %}
};

class ConsolidatingTIDSet
{
public:

    struct Item
    {
        Item( const MDEntities::Type type, std::optional<std::string> id = std::nullopt )
            : type( type )
            , id( id )
        {}

        bool operator ==( const Item& other ) const { return type == other.type && id == other.id; }

        TMQMarket_API bool isMatch( const Item& other ) const;

        MDEntities::Type type;
        std::optional<std::string> id;
    };

public:
    ConsolidatingTIDSet() = default;
    TMQMarket_API ConsolidatingTIDSet( const std::initializer_list<Item> items );

    TMQMarket_API void add( const Item& item );
    TMQMarket_API void del( const Item& item );

    TMQMarket_API void append( const ConsolidatingTIDSet& otherSet );
    TMQMarket_API void remove( const ConsolidatingTIDSet& otherSet );

    TMQMarket_API bool contains( const Item& item ) const;

    [[nodiscard]] const std::vector<Item>& getAll() const { return m_list; }

public:
    TMQMarket_API static const ConsolidatingTIDSet ALL_TYPES;

private:
    std::vector<Item> m_list;
};

/*
TODO: Figure out loading/saving entire market data from/to a source.

TMQMarket_API std::shared_ptr<Market> load( const Context& ctx, const std::shared_ptr<MktDataSource>& source = nullptr );
TMQMarket_API void save( const std::shared_ptr<Market> mkt, const Context& ctx, const std::shared_ptr<MktDataSource>& source = nullptr );
TMQMarket_API void save( const MarketSnapshot& mktSnapshot, const Context& ctx, const std::shared_ptr<MktDataSource>& source = nullptr );
*/

}
}