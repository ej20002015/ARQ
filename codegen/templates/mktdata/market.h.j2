{#
  // codegen-metadata
  // output_path: ARQLib/ARQMarket/inc/market.h
#}
// THIS FILE IS AUTO-GENERATED BY THE CODE-GEN SCRIPT. DO NOT EDIT.
// Defines the Market and MarketSnapshot classes, which hold market data entities.

#pragma once
#include <ARQMarket/dll.h>

#include <ARQUtils/hashers.h>
#include <ARQUtils/time.h>
#include <ARQCore/mktdata_entities.h>

#include <unordered_map>
#include <mutex>
#include <shared_mutex>

namespace ARQ
{
namespace Mkt
{

struct Name
{
	std::string tag;
	Time::Date date;

	Name() = default;
	Name( const std::string_view tag, const Time::Date date = Time::Date() )
		: tag( tag )
		, date( date )
	{}

	std::string str() const;

	ARQMarket_API static const Name LIVE;
};

template<MDEntities::c_MDEntity T>
using MktObjMap = std::unordered_map<std::string, T>;

// Forward declarations
class Market;
class MarketSnapshot;

class MarketReadLock
{
public:
    // Lock all entities
    explicit MarketReadLock( const Market& market );
    
    // Lock specific entities
    explicit MarketReadLock( const Market& market, const std::vector<MDEntities::Type>& entityTypes );
    
    ~MarketReadLock() = default; // RAII handles unlock
    
    // Non-copyable, moveable
    MarketReadLock( const MarketReadLock& ) = delete;
    MarketReadLock& operator=( const MarketReadLock& ) = delete;
    MarketReadLock( MarketReadLock&& ) = default;
    MarketReadLock& operator=( MarketReadLock&& ) = default;

private:
    std::vector<std::shared_lock<std::shared_mutex>> m_locks;
};

class MarketWriteLock
{
public:
    // Lock all entities
    explicit MarketWriteLock( const Market& market );
    
    // Lock specific entities
    explicit MarketWriteLock( const Market& market, const std::vector<MDEntities::Type>& entityTypes );

    ~MarketWriteLock() = default; // RAII handles unlock
    
    // Non-copyable, moveable
    MarketWriteLock( const MarketWriteLock& ) = delete;
    MarketWriteLock& operator=( const MarketWriteLock& ) = delete;
    MarketWriteLock( MarketWriteLock&& ) = default;
    MarketWriteLock& operator=( MarketWriteLock&& ) = default;

private:
    std::vector<std::unique_lock<std::shared_mutex>> m_locks;
};

class Market
{
public:
    Market() = default;
    explicit ARQMarket_API Market( const MarketSnapshot& mktSnapshot );

    {% for entity in entities %}
    // --- Methods for {{ entity.name }} ({{ entity.type_string }}) ---

    [[nodiscard]] std::optional<MDEntities::{{ entity.name }}> get{{ entity.name }}( const std::string_view ID ) const
    {
        std::shared_lock<std::shared_mutex> sl( m_{{ entity.name_plural }}Mut );
        return get{{ entity.name }}Unsafe( ID );
    }

    void set{{ entity.name }}( const MDEntities::{{ entity.name }}& newObj )
    {
        std::unique_lock<std::shared_mutex> ul( m_{{ entity.name_plural }}Mut );
        set{{ entity.name }}Unsafe( newObj );
    }

    void set{{ entity.name }}( MDEntities::{{ entity.name }}&& newObj )
    {
        std::unique_lock<std::shared_mutex> ul( m_{{ entity.name_plural }}Mut );
        set{{ entity.name }}Unsafe( std::move( newObj ) );
    }

    size_t get{{ entity.name }}Count() const noexcept
    {
        std::shared_lock<std::shared_mutex> sl( m_{{ entity.name_plural }}Mut );
        return m_{{ entity.name_plural }}.size();
    }

    [[nodiscard]] MktObjMap<MDEntities::{{ entity.name }}> getAll{{ entity.name_plural }}() const
    {
        std::shared_lock<std::shared_mutex> sl( m_{{ entity.name_plural }}Mut );
        return m_{{ entity.name_plural }};
    }

    void setAll{{ entity.name_plural }}( const MktObjMap<MDEntities::{{ entity.name }}>& newMap )
    {
        std::unique_lock<std::shared_mutex> ul( m_{{ entity.name_plural }}Mut );
        m_{{ entity.name_plural }} = newMap;
    }

    // Unsafe methods (no locking - for use when already holding appropriate locks)
    
    [[nodiscard]] std::optional<MDEntities::{{ entity.name }}> get{{ entity.name }}Unsafe( const std::string_view ID ) const
    {
        const auto it = m_{{ entity.name_plural }}.find( ID.data() );
        if( it == m_{{ entity.name_plural }}.end() )
            return std::nullopt;

        return it->second;
    }

    void set{{ entity.name }}Unsafe( const MDEntities::{{ entity.name }}& newObj )
    {
        m_{{ entity.name_plural }}[newObj.ID] = newObj;
    }

    void set{{ entity.name }}Unsafe( MDEntities::{{ entity.name }}&& newObj )
    {
        m_{{ entity.name_plural }}[newObj.ID] = std::move( newObj );
    }

    {% endfor %}

    // --- Misc Methods ---

    [[nodiscard]] ARQMarket_API MarketSnapshot snap() const;

    // --- Lock Acquisition Methods ---
    
    // Lock specific entities for reading
    MarketReadLock acquireReadLock( const std::vector<MDEntities::Type>& entityTypes ) const
    {
        return MarketReadLock( *this, entityTypes );
    }
    
    // Lock specific entities for writing
    MarketWriteLock acquireWriteLock( const std::vector<MDEntities::Type>& entityTypes ) const
    {
        return MarketWriteLock( *this, entityTypes );
    }
    
    // Lock all entities for reading
    MarketReadLock acquireReadLockAll() const
    {
        return MarketReadLock( *this );
    }
    
    // Lock all entities for writing
    MarketWriteLock acquireWriteLockAll() const
    {
        return MarketWriteLock( *this );
    }

private:
    {% for entity in entities %}
    MktObjMap<MDEntities::{{ entity.name }}> m_{{ entity.name_plural }};
    mutable std::shared_mutex m_{{ entity.name_plural }}Mut;
    {% endfor %}

    // Friend class for accessing internal maps
    friend class MarketSnapshot;
    friend class MarketReadLock;
    friend class MarketWriteLock;

    // Helper method for lock classes to get mutex reference
    std::shared_mutex& getMutexForEntity(MDEntities::Type entityType) const;
};

class MarketSnapshot
{
public:
    // Only a Market should create a MarketSnapshot
	MarketSnapshot() = default;

    {% for entity in entities %}
    // --- Methods for {{ entity.name }} ({{ entity.type_string }}) ---

    [[nodiscard]] std::optional<MDEntities::{{ entity.name }}> get{{ entity.name }}( const std::string_view ID ) const
    {
        return get<MDEntities::{{ entity.name }}>( m_{{ entity.name_plural }}, ID );
    }

    [[nodiscard]] MktObjMap<MDEntities::{{ entity.name }}> getAll{{ entity.name_plural }}() const
    {
        return m_{{ entity.name_plural }};
    }

    {% endfor %}
private:
    // Market has access to populate snapshot members
	friend class Market;

	template<MDEntities::c_MDEntity T>
	[[nodiscard]] std::optional<T> get( const MktObjMap<T>& objMap, const std::string_view ID ) const
	{
		const auto it = objMap.find( ID.data() );
		if( it == objMap.end() )
			return std::nullopt;

		return it->second;
	}

private:
	{% for entity in entities %}
    MktObjMap<MDEntities::{{ entity.name }}> m_{{ entity.name_plural }};
    {% endfor %}
};

class ConsolidatingTIDSet
{
public:

    struct Item
    {
        Item( const MDEntities::Type type, std::optional<std::string> id = std::nullopt )
            : type( type )
            , id( id )
        {}
        Item()
            : type( MDEntities::Type::_NOTSET_ )
            , id( std::nullopt )
        {}

        bool operator ==( const Item& other ) const { return type == other.type && id == other.id; }

        ARQMarket_API bool isMatch( const Item& other ) const;

        MDEntities::Type type;
        std::optional<std::string> id;
    };

public:
    ConsolidatingTIDSet() = default;
    ARQMarket_API ConsolidatingTIDSet( const std::initializer_list<Item>& items );
    ARQMarket_API ConsolidatingTIDSet( const std::vector<Item>& items );

    ARQMarket_API void add( const Item& item );
    ARQMarket_API void del( const Item& item );

    ARQMarket_API void append( const ConsolidatingTIDSet& otherSet );
    ARQMarket_API void remove( const ConsolidatingTIDSet& otherSet );

    ARQMarket_API bool contains( const Item& item ) const;

    [[nodiscard]] const std::vector<Item>& getAll() const { return m_list; }

public:
    ARQMarket_API static const ConsolidatingTIDSet ALL_TYPES;

private:
    std::vector<Item> m_list;
};

/*
TODO: Figure out loading/saving entire market data from/to a source.

ARQMarket_API std::shared_ptr<Market> load( const Context& ctx, const std::shared_ptr<MktDataSource>& source = nullptr );
ARQMarket_API void save( const std::shared_ptr<Market> mkt, const Context& ctx, const std::shared_ptr<MktDataSource>& source = nullptr );
ARQMarket_API void save( const MarketSnapshot& mktSnapshot, const Context& ctx, const std::shared_ptr<MktDataSource>& source = nullptr );
*/

}
}