{#
  // codegen-metadata
  // output_path: ARQLib/SWIG/ARQMarket/managed_market.i
#}
// THIS FILE IS AUTO-GENERATED BY THE CODE-GEN SCRIPT. DO NOT EDIT.
// SWIG interface file for the ManagedMarket class

#ifndef managed_market_i
#define managed_market_i

%{
#include <ARQMarket/managed_market.h>
%}

%include "market.i"

%include <std_string.i>
%include <std_string_view.i>
%include <std_shared_ptr.i>

#ifdef SWIGCSHARP
#define SWIG_STD_OPTIONAL_USE_NULLABLE_REFERENCE_TYPES
%include "../csharp/std_optional.i"
#endif

#ifdef SWIGPYTHON
%include "../python/std_optional.i"
#endif

#ifdef SWIGPYTHON
%rename(Mkt_Subscriber) ARQ::Mkt::Subscriber;
%rename(Mkt_VirtualSubscriber) ARQ::Mkt::VirtualSubscriber;
    %rename(on_mkt_obj_update) ARQ::Mkt::VirtualSubscriber::onMktObjUpdate;
    {% for entity in entities %}
    %rename(on_{{ entity.name | snake_case }}_update) on{{ entity.name }}Update;
    {% endfor %}
%rename(Mkt_ManagedMarket) ARQ::Mkt::ManagedMarket;
    %rename(subscribe_and_load) ARQ::Mkt::ManagedMarket::subscribeAndLoad;
    %rename(is_subscriber) ARQ::Mkt::ManagedMarket::isSubscriber;
    {% for entity in entities %}
    %rename(get_{{ entity.name | snake_case }}) get{{ entity.name }};
    %rename(set_{{ entity.name | snake_case }}) set{{ entity.name }};
    %rename(on_{{ entity.name | snake_case }}_update) on{{ entity.name }}Update;
    {% endfor %}
#endif

{% for entity in entities %}
%optional(ARQ::MDEntities::{{ entity.name }});
{% endfor %}

%shared_ptr(ARQ::Mkt::Subscriber)
%shared_ptr(ARQ::Mkt::VirtualSubscriber)

%feature("director") ARQ::Mkt::VirtualSubscriber;

namespace ARQ
{
namespace Mkt
{

class Subscriber
{
public:
    virtual ~Subscriber() = default;

    virtual const std::string_view description() const = 0;
};

/// <summary>Primarily used to enable subscriber callbacks from C++ to other languages using SWIG directors</summary>
class VirtualSubscriber : public Subscriber
{
public:
    explicit VirtualSubscriber( const std::string_view description );
    ~VirtualSubscriber() = default;

    virtual const std::string_view description() const override;

    virtual void onMktObjUpdate( const MDEntities::Type type, const std::string& ID );

    {% for entity in entities %}
    virtual void on{{ entity.name }}Update( const MDEntities::{{ entity.name }}& updatedObj );
    {% endfor %}
};

class ManagedMarket
{
public:
    ManagedMarket( std::string_view dsh, const Mkt::Name& mktName );
    ManagedMarket( std::string_view dsh, const Mkt::Name& mktName, const MarketSnapshot& mktSnapshot );

    /*
    These will be accessed via proxy functions - see %extend block declared below

    void subscribe( const std::weak_ptr<Subscriber> subscriber, const ConsolidatingTIDSet& subscriptionList );
    void subscribeAndLoad( const std::weak_ptr<Subscriber> subscriber, const ConsolidatingTIDSet& subscriptionList ) throw( ARQ::ARQException );
    void unsubscribe( const std::weak_ptr<Subscriber> subscriber, const std::optional<std::reference_wrapper<const ConsolidatingTIDSet>>& subscriptionList = std::nullopt );

    bool isSubscriber( const std::weak_ptr<Subscriber> subscriber ) const;

    */

    void load( const ConsolidatingTIDSet& toLoad ) throw( ARQ::ARQException );

    MarketSnapshot snap() const;

    {% for entity in entities %}
    // --- Methods for {{ entity.name }} ({{ entity.type_string }}) ---
    [[nodiscard]] std::optional<MDEntities::{{ entity.name }}> get{{ entity.name }}( const std::string_view ID ) const { return m_mkt.get{{ entity.name }}( ID ); }
    void set{{ entity.name }}( const MDEntities::{{ entity.name }}& newObj ) { m_mkt.set{{ entity.name }}( newObj ); }
    void on{{ entity.name }}Update( const MDEntities::{{ entity.name }}& updatedObj );

    {% endfor %}
};

// Extend ManagedMarket with SWIG-friendly subscription methods
%extend ManagedMarket
{
    void subscribe( std::shared_ptr<VirtualSubscriber> subscriber, const ConsolidatingTIDSet& subscriptionList )
    {
        $self->subscribe(subscriber, subscriptionList);
    }

    void subscribeAndLoad( std::shared_ptr<VirtualSubscriber> subscriber, const ConsolidatingTIDSet& subscriptionList )
    {
        $self->subscribeAndLoad(subscriber, subscriptionList);
    }

    void unsubscribe( std::shared_ptr<VirtualSubscriber> subscriber )
    {
        $self->unsubscribe(subscriber);
    }

    void unsubscribe( std::shared_ptr<VirtualSubscriber> subscriber, const ConsolidatingTIDSet& subscriptionList )
    {
        $self->unsubscribe(subscriber, subscriptionList);
    }

    bool isSubscriber( std::shared_ptr<VirtualSubscriber> subscriber ) const
    {
        return $self->isSubscriber(subscriber);
    }
}

}
}

#endif