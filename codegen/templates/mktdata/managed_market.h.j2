{#
  // codegen-metadata
  // output_path: ARQLib/ARQMarket/inc/managed_market.h
#}
// THIS FILE IS AUTO-GENERATED BY THE CODE-GEN SCRIPT. DO NOT EDIT.
// Defines the ManagedMarket class, which manages subscriptions to market data updates.

#pragma once
#include <ARQMarket/dll.h>

#include <ARQMarket/market.h>

#include <map>
#include <functional>
#include <shared_mutex>

namespace ARQ
{
namespace Mkt
{

class ManagedMarket;

class Subscriber
{
public:
    using OnMktObjUpdateFunc = std::function<void( const MDEntities::Type type, const std::string_view ID )>;
    
    {% for entity in entities %}
    using On{{ entity.name }}UpdateFunc = std::function<void( const MDEntities::{{ entity.name }}& updatedObj )>;
    {% endfor %}

public:
    virtual ~Subscriber() = default;

    ARQMarket_API virtual const std::string_view description() const = 0;

    ARQMarket_API void setOnMktObjUpdateFunc( OnMktObjUpdateFunc&& onMktObjUpdateFunc );

    {% for entity in entities %}
    ARQMarket_API void setOn{{ entity.name }}UpdateFunc( On{{ entity.name }}UpdateFunc&& on{{ entity.name }}UpdateFunc );
    {% endfor %}

private:
    std::shared_mutex m_mut;

    OnMktObjUpdateFunc m_onMktObjUpdateFunc;

    {% for entity in entities %}
    On{{ entity.name }}UpdateFunc m_on{{ entity.name }}UpdateFunc;
    {% endfor %}

private:
    friend class ManagedMarket;
};

/// <summary>Primarily used to enable subscriber callbacks from C++ to other languages using SWIG directors</summary>
class VirtualSubscriber : public Subscriber
{
public:
    ARQMarket_API explicit VirtualSubscriber( const std::string_view description );
    ~VirtualSubscriber() = default;

    virtual const std::string_view description() const override { return m_description; }

    virtual void onMktObjUpdate( const MDEntities::Type type, const std::string& ID ) {}

    {% for entity in entities %}
    virtual void on{{ entity.name }}Update( const MDEntities::{{ entity.name }}& updatedObj ) {}
    {% endfor %}

private:
    std::string m_description;
};

class ManagedMarket
{
public:
    ManagedMarket( std::string_view dsh, const Mkt::Name& mktName )
        : m_dsh( dsh )
        , m_mktName( mktName )
    {}
    ManagedMarket( std::string_view dsh, const Mkt::Name& mktName, const MarketSnapshot& mktSnapshot )
        : m_dsh( dsh )
        , m_mktName( mktName )
        , m_mkt( mktSnapshot )
    {}

    ARQMarket_API void subscribe( const std::weak_ptr<Subscriber> subscriber, const ConsolidatingTIDSet& subscriptionList );
    ARQMarket_API void subscribeAndLoad( const std::weak_ptr<Subscriber> subscriber, const ConsolidatingTIDSet& subscriptionList );
    ARQMarket_API void unsubscribe( const std::weak_ptr<Subscriber> subscriber, const std::optional<std::reference_wrapper<const ConsolidatingTIDSet>>& subscriptionList = std::nullopt );

    ARQMarket_API bool isSubscriber( const std::weak_ptr<Subscriber> subscriber ) const;

    ARQMarket_API void load( const ConsolidatingTIDSet& toLoad );

    [[nodiscard]] ARQMarket_API MarketSnapshot snap() const;

    {% for entity in entities %}
    // --- Methods for {{ entity.name }} ({{ entity.type_string }}) ---
    [[nodiscard]] std::optional<MDEntities::{{ entity.name }}> get{{ entity.name }}( const std::string_view ID ) const { return m_mkt.get{{ entity.name }}( ID ); }
    void set{{ entity.name }}( const MDEntities::{{ entity.name }}& newObj ) { m_mkt.set{{ entity.name }}( newObj ); }
    ARQMarket_API void on{{ entity.name }}Update( const MDEntities::{{ entity.name }}& updatedObj );

    {% endfor %}
private:
    template<MDEntities::c_MDEntity T>
    void sendMktUpdateToSubscribers( const T& updatedObj );

private:
    std::string m_dsh;
    Mkt::Name m_mktName;

    Market m_mkt;

    std::map<std::weak_ptr<Subscriber>, ConsolidatingTIDSet, std::owner_less<std::weak_ptr<Subscriber>>> m_subscriptions;
    mutable std::shared_mutex m_subMut;
};

}
}