// THIS FILE IS AUTO-GENERATED BY THE CODE-GEN SCRIPT. DO NOT EDIT.
// SWIG interface file for Market Data entities

#ifndef mktdata_entities_i
#define mktdata_entities_i

%include <stdint.i>
%include <std_string.i>
%include <std_string_view.i>
%include "../ARQUtils/time.i"

%{
#include <ARQCore/mktdata_entities.h>

#include <ARQUtils/time.h>
#include <ARQUtils/core.h>
%}

#ifdef SWIGPYTHON
%rename(MDEntities_MDEntity) ARQ::MDEntities::MDEntity;
%rename(MDEntities_Type) ARQ::MDEntities::Type;
%rename(MDEntities_Type_to_str) ARQ::MDEntities::typeToStr;
%rename(MDEntities_FXRate) ARQ::MDEntities::FXRate;
%rename(MDEntities_EQPrice) ARQ::MDEntities::EQPrice;
#endif

namespace ARQ
{
namespace MDEntities
{

/*
*************************************************
* Common functionality for Market Data Entities *
*************************************************
*/

// Base struct for all market data entities
struct MDEntity
{
    bool _isActive = true;
    Time::DateTime _lastUpdatedTs;
    std::string _lastUpdatedBy;

    /// The unique identifier for the market data entity.
	std::string ID;
    /// The source of the market data.
	std::string source;
    /// The point-in-time when the market data was effective.
	Time::DateTime asofTs;
};

enum class Type
{
    FXR,
    EQP,
};

std::string_view typeToStr( const Type type );


/*
********************************************
*            Entity Definitions            *
********************************************
*/


/// Represents a foreign exchange spot rate.
struct FXRate : public MDEntity
{
    /// The mid-market rate.
    double mid;
    /// The price at which a market maker is willing to buy.
    double bid;
    /// The price at which a market maker is willing to sell.
    double ask;
};



/// Represents pricing information for an equity.
struct EQPrice : public MDEntity
{
    /// The price of the last executed trade.
    double last;
    /// The highest price a buyer is willing to pay.
    double bid;
    /// The lowest price a seller is willing to accept.
    double ask;
    /// The opening price for the current trading session.
    double open;
    /// The closing price from the previous trading session.
    double close;
    /// The cumulative volume for the current trading session.
    std::int64_t volume;
};


}
}

#endif