// THIS FILE IS AUTO-GENERATED BY THE CODE-GEN SCRIPT. DO NOT EDIT.
// SWIG interface file for Market Data entities

#ifndef mktdata_entities_i
#define mktdata_entities_i

%include <stdint.i>
%include <std_string.i>
%include <std_string_view.i>
%include <std_vector.i>
%include "../ARQUtils/time.i"

%{
#include <ARQCore/mktdata_entities.h>

#include <ARQUtils/time.h>
#include <ARQUtils/core.h>
%}

#ifdef SWIGCSHARP
%nspacemove(ARQ::MDEntities) std::vector<ARQ::MDEntities::MemberInfo>;
#endif

#ifdef SWIGPYTHON
%rename(MDEntities_MDEntity) ARQ::MDEntities::MDEntity;
%rename(MDEntities_Type) ARQ::MDEntities::Type;
%rename(MDEntities_Type_to_str) ARQ::MDEntities::typeToStr;
%rename(MDEntities_MemberInfo) ARQ::MDEntities::MemberInfo;
    %rename(cpp_type) ARQ::MDEntities::MemberInfo::cppType;
    %rename(clickhouse_type) ARQ::MDEntities::MemberInfo::clickhouseType;
    %rename(flatbuffer_type) ARQ::MDEntities::MemberInfo::flatbufferType;
%rename(MDEntities_FXRate) ARQ::MDEntities::FXRate;
    %rename(type_enum) ARQ::MDEntities::FXRate::typeEnum;
    %rename(table_name) ARQ::MDEntities::FXRate::tableName;
    %rename(get_members_info) ARQ::MDEntities::FXRate::getMembersInfo;
    %rename(get_member_info) ARQ::MDEntities::FXRate::getMemberInfo;
%rename(MDEntities_EQPrice) ARQ::MDEntities::EQPrice;
    %rename(type_enum) ARQ::MDEntities::EQPrice::typeEnum;
    %rename(table_name) ARQ::MDEntities::EQPrice::tableName;
    %rename(get_members_info) ARQ::MDEntities::EQPrice::getMembersInfo;
    %rename(get_member_info) ARQ::MDEntities::EQPrice::getMemberInfo;
%rename(MDEntities_MemberInfoVec) std::vector<ARQ::MDEntities::MemberInfo>;
#endif

namespace std
{
    %template(MemberInfoVec) std::vector<ARQ::MDEntities::MemberInfo>;
};

#ifdef SWIGCSHARP
#define SWIG_STD_OPTIONAL_USE_NULLABLE_REFERENCE_TYPES
%include "../csharp/std_optional.i"
#endif
#ifdef SWIGPYTHON
%include "../python/std_optional.i"
#endif

%optional(ARQ::MDEntities::MemberInfo);

namespace ARQ
{
namespace MDEntities
{

/*
*************************************************
* Common functionality for Market Data Entities *
*************************************************
*/

// Base struct for all market data entities
struct MDEntity
{
    bool _isActive = true;
    Time::DateTime _lastUpdatedTs;
    std::string _lastUpdatedBy;

    /// The unique identifier for the market data entity.
	std::string ID;
    /// The source of the market data.
	std::string source;
    /// The point-in-time when the market data was effective.
	Time::DateTime asofTs;
};

enum class Type
{
    FXR,
    EQP,
};

std::string_view typeToStr( const Type type );

struct MemberInfo
{
    /// Name of the C++ member variable
    std::string_view name;
    /// Documentation string
    std::string_view comment;
    /// The language agnostic type as a string
    std::string_view type;
    /// The C++ type as a string
    std::string_view cppType;
    /// The ClickHouse type as a string
    std::string_view clickhouseType;
    /// The FlatBuffers type as a string
    std::string_view flatbufferType;
};

/*
********************************************
*            Entity Definitions            *
********************************************
*/


/// Represents a foreign exchange spot rate.
struct FXRate : public MDEntity
{
    /// The mid-market rate.
    double mid;
    /// The price at which a market maker is willing to buy.
    double bid;
    /// The price at which a market maker is willing to sell.
    double ask;
};

// Extend FXRate with SWIG-friendly static methods that wrap the constexpr Traits<FXRate>
%extend FXRate
{
    static std::string_view name() { return ARQ::MDEntities::Traits<ARQ::MDEntities::FXRate>::name(); }
    static std::string_view type() { return ARQ::MDEntities::Traits<ARQ::MDEntities::FXRate>::type(); }
    static ARQ::MDEntities::Type typeEnum() { return ARQ::MDEntities::Traits<ARQ::MDEntities::FXRate>::typeEnum(); }
    static std::string_view tableName() { return ARQ::MDEntities::Traits<ARQ::MDEntities::FXRate>::tableName(); }
    static const std::vector<ARQ::MDEntities::MemberInfo>& getMembersInfo()
    {
        static std::vector<ARQ::MDEntities::MemberInfo> membersInfo;
        if( membersInfo.empty() )
        {
            for( const auto& info : ARQ::MDEntities::Traits<ARQ::MDEntities::FXRate>::membersInfo )
                membersInfo.push_back( info );
        }
        return membersInfo;
    }
    static std::optional<ARQ::MDEntities::MemberInfo> getMemberInfo( const std::string_view memberName )
    {
        return ARQ::MDEntities::Traits<ARQ::MDEntities::FXRate>::getMemberInfo( memberName );
    }
}


/// Represents pricing information for an equity.
struct EQPrice : public MDEntity
{
    /// The price of the last executed trade.
    double last;
    /// The highest price a buyer is willing to pay.
    double bid;
    /// The lowest price a seller is willing to accept.
    double ask;
    /// The opening price for the current trading session.
    double open;
    /// The closing price from the previous trading session.
    double close;
    /// The cumulative volume for the current trading session.
    std::int64_t volume;
};

// Extend EQPrice with SWIG-friendly static methods that wrap the constexpr Traits<EQPrice>
%extend EQPrice
{
    static std::string_view name() { return ARQ::MDEntities::Traits<ARQ::MDEntities::EQPrice>::name(); }
    static std::string_view type() { return ARQ::MDEntities::Traits<ARQ::MDEntities::EQPrice>::type(); }
    static ARQ::MDEntities::Type typeEnum() { return ARQ::MDEntities::Traits<ARQ::MDEntities::EQPrice>::typeEnum(); }
    static std::string_view tableName() { return ARQ::MDEntities::Traits<ARQ::MDEntities::EQPrice>::tableName(); }
    static const std::vector<ARQ::MDEntities::MemberInfo>& getMembersInfo()
    {
        static std::vector<ARQ::MDEntities::MemberInfo> membersInfo;
        if( membersInfo.empty() )
        {
            for( const auto& info : ARQ::MDEntities::Traits<ARQ::MDEntities::EQPrice>::membersInfo )
                membersInfo.push_back( info );
        }
        return membersInfo;
    }
    static std::optional<ARQ::MDEntities::MemberInfo> getMemberInfo( const std::string_view memberName )
    {
        return ARQ::MDEntities::Traits<ARQ::MDEntities::EQPrice>::getMemberInfo( memberName );
    }
}



}
}

#endif