// THIS FILE IS AUTO-GENERATED BY THE CODE-GEN SCRIPT. DO NOT EDIT.
// SWIG interface file for the Market and MarketSnapshot classes

#ifndef market_i
#define market_i

%{
#include <ARQMarket/market.h>
%}

%include <std_string_view.i>
%include <std_string.i>
%include <std_vector.i>
%include <std_unordered_map.i>

#ifdef SWIGCSHARP
#define SWIG_STD_OPTIONAL_USE_NULLABLE_REFERENCE_TYPES
%include "../csharp/std_optional.i"
#endif

#ifdef SWIGPYTHON
%include "../python/std_optional.i"
#endif

#ifdef SWIGCSHARP
%rename(eq) ARQ::Mkt::ConsolidatingTIDSet::Item::operator==;
#endif

#ifdef SWIGPYTHON
%rename(__eq__) ARQ::Mkt::ConsolidatingTIDSet::Item::operator==;
#endif

%optional_string();
%optional(ARQ::MDEntities::FXRate);
%optional(ARQ::MDEntities::EQPrice);

%nspacemove(ARQ::Mkt) std::vector<ARQ::MDEntities::Type>;
%nspacemove(ARQ::Mkt) std::vector<ARQ::Mkt::ConsolidatingTIDSet::Item>;
%nspacemove(ARQ::Mkt) std::unordered_map<std::string, ARQ::MDEntities::FXRate>;
%nspacemove(ARQ::Mkt) std::unordered_map<std::string, ARQ::MDEntities::EQPrice>;

namespace std
{
  %template(MDTypes) std::vector<ARQ::MDEntities::Type>;
  %template(TIDSetItems) std::vector<ARQ::Mkt::ConsolidatingTIDSet::Item>;

  %template(FXRatesMap) std::unordered_map<std::string, ARQ::MDEntities::FXRate>;
  %template(EQPricesMap) std::unordered_map<std::string, ARQ::MDEntities::EQPrice>;
};

// For MarketReadLock move only
%typemap(out) ARQ::Mkt::MarketReadLock %{
  $result = new $1_ltype($1);
%}

// For MarketWriteLock move only
%typemap(out) ARQ::Mkt::MarketWriteLock %{
  $result = new $1_ltype($1);
%}


namespace ARQ
{
namespace Mkt
{

struct Name
{
	std::string tag;
	Time::Date date;

	Name();
    Name( const std::string_view tag );
	Name( const std::string_view tag, const Time::Date date );

	std::string str() const;

	static const Name LIVE;
};

class Market;
class MarketSnapshot;

class MarketReadLock
{
public:
    // Lock all entities
    explicit MarketReadLock( const Market& market );

    // Lock specific entities
    explicit MarketReadLock( const Market& market, const std::vector<ARQ::MDEntities::Type>& entityTypes );

    ~MarketReadLock();
    
    // Non-copyable, moveable
    MarketReadLock( const MarketReadLock& ) = delete;
    MarketReadLock( MarketReadLock&& );
};

class MarketWriteLock
{
public:
    // Lock all entities
    explicit MarketWriteLock( const Market& market );
    
    // Lock specific entities
    explicit MarketWriteLock( const Market& market, const std::vector<ARQ::MDEntities::Type>& entityTypes );

    ~MarketWriteLock();
    
    // Non-copyable, moveable
    MarketWriteLock( const MarketWriteLock& ) = delete;
    MarketWriteLock( MarketWriteLock&& );
};

class Market
{
public:
    Market();
    explicit Market( const MarketSnapshot& mktSnapshot );

    // --- Methods for FXRate (FXR) ---

    std::optional<MDEntities::FXRate> getFXRate( const std::string_view ID ) const;
    void setFXRate( const MDEntities::FXRate& newObj );

    size_t getFXRateCount() const noexcept;

    std::unordered_map<std::string, ARQ::MDEntities::FXRate> getAllFXRates() const;
    void setAllFXRates( const std::unordered_map<std::string, ARQ::MDEntities::FXRate>& newMap );

    // Unsafe methods (no locking - for use when already holding appropriate locks)
    
    std::optional<MDEntities::FXRate> getFXRateUnsafe( const std::string_view ID ) const;
    void setFXRateUnsafe( const MDEntities::FXRate& newObj );

    // --- Methods for EQPrice (EQP) ---

    std::optional<MDEntities::EQPrice> getEQPrice( const std::string_view ID ) const;
    void setEQPrice( const MDEntities::EQPrice& newObj );

    size_t getEQPriceCount() const noexcept;

    std::unordered_map<std::string, ARQ::MDEntities::EQPrice> getAllEQPrices() const;
    void setAllEQPrices( const std::unordered_map<std::string, ARQ::MDEntities::EQPrice>& newMap );

    // Unsafe methods (no locking - for use when already holding appropriate locks)
    
    std::optional<MDEntities::EQPrice> getEQPriceUnsafe( const std::string_view ID ) const;
    void setEQPriceUnsafe( const MDEntities::EQPrice& newObj );


    // --- Misc Methods ---

    MarketSnapshot snap() const;

    // --- Lock Acquisition Methods ---
    
    // Lock specific entities for reading
    MarketReadLock acquireReadLock( const std::vector<ARQ::MDEntities::Type>& entityTypes ) const;
    
    // Lock specific entities for writing
    MarketWriteLock acquireWriteLock( const std::vector<ARQ::MDEntities::Type>& entityTypes ) const;
    
    // Lock all entities for reading
    MarketReadLock acquireReadLockAll() const;
    
    // Lock all entities for writing
    MarketWriteLock acquireWriteLockAll() const;
};

class MarketSnapshot
{
public:
    // --- Methods for FXRate (FXR) ---

    std::optional<MDEntities::FXRate> getFXRate( const std::string_view ID ) const;

    std::unordered_map<std::string, ARQ::MDEntities::FXRate> getAllFXRates() const;

    // --- Methods for EQPrice (EQP) ---

    std::optional<MDEntities::EQPrice> getEQPrice( const std::string_view ID ) const;

    std::unordered_map<std::string, ARQ::MDEntities::EQPrice> getAllEQPrices() const;

};

class ConsolidatingTIDSet
{
public:

    struct Item
    {
        Item( const MDEntities::Type type );
        Item( const MDEntities::Type type, std::string id );
        bool operator ==( const Item& other ) const;

        bool isMatch( const Item& other ) const;

        MDEntities::Type type;
        std::optional<std::string> id;
    };

public:
    ConsolidatingTIDSet();
    ConsolidatingTIDSet( const std::vector<ARQ::Mkt::ConsolidatingTIDSet::Item>& items );

    void add( const Item& item );
    void del( const Item& item );

    void append( const ConsolidatingTIDSet& otherSet );
    void remove( const ConsolidatingTIDSet& otherSet );

    bool contains( const Item& item ) const;

    const std::vector<Item>& getAll() const;

public:
    static const ConsolidatingTIDSet ALL_TYPES;
};

/*
TODO: Figure out loading/saving entire market data from/to a source.

ARQMarket_API std::shared_ptr<Market> load( const Context& ctx, const std::shared_ptr<MktDataSource>& source = nullptr );
ARQMarket_API void save( const std::shared_ptr<Market> mkt, const Context& ctx, const std::shared_ptr<MktDataSource>& source = nullptr );
ARQMarket_API void save( const MarketSnapshot& mktSnapshot, const Context& ctx, const std::shared_ptr<MktDataSource>& source = nullptr );
*/

}
}

#endif