// THIS FILE IS AUTO-GENERATED BY THE CODE-GEN SCRIPT. DO NOT EDIT.
// SWIG interface file for the ManagedMarket class

#ifndef managed_market_i
#define managed_market_i

%{
#include <ARQMarket/managed_market.h>
%}

%include "market.i"
%include "../exception.i"

%include <std_string.i>
%include <std_string_view.i>
%include <std_shared_ptr.i>

#ifdef SWIGCSHARP
#define SWIG_STD_OPTIONAL_USE_NULLABLE_REFERENCE_TYPES
%include "../csharp/std_optional.i"
#endif

#ifdef SWIGPYTHON
%include "../python/std_optional.i"
#endif

%optional(ARQ::MDEntities::FXRate);
%optional(ARQ::MDEntities::EQPrice);

%shared_ptr(ARQ::Mkt::Subscriber)
%shared_ptr(ARQ::Mkt::VirtualSubscriber)

%feature("director") ARQ::Mkt::VirtualSubscriber;

namespace ARQ
{
namespace Mkt
{

class Subscriber
{
public:
    virtual ~Subscriber() = default;

    virtual const std::string_view description() const = 0;
};

/// <summary>Primarily used to enable subscriber callbacks from C++ to other languages using SWIG directors</summary>
class VirtualSubscriber : public Subscriber
{
public:
    explicit VirtualSubscriber( const std::string_view description );
    ~VirtualSubscriber() = default;

    virtual const std::string_view description() const override;

    virtual void onMktObjUpdate( const MDEntities::Type type, const std::string& ID );

    virtual void onFXRateUpdate( const MDEntities::FXRate& updatedObj );
    virtual void onEQPriceUpdate( const MDEntities::EQPrice& updatedObj );
};

class ManagedMarket
{
public:
    ManagedMarket( std::string_view dsh, const Mkt::Name& mktName );
    ManagedMarket( std::string_view dsh, const Mkt::Name& mktName, const MarketSnapshot& mktSnapshot );

    /*
    These will be accessed via proxy functions - see %extend block declared below

    void subscribe( const std::weak_ptr<Subscriber> subscriber, const ConsolidatingTIDSet& subscriptionList );
    void subscribeAndLoad( const std::weak_ptr<Subscriber> subscriber, const ConsolidatingTIDSet& subscriptionList );
    void unsubscribe( const std::weak_ptr<Subscriber> subscriber, const std::optional<std::reference_wrapper<const ConsolidatingTIDSet>>& subscriptionList = std::nullopt );

    bool isSubscriber( const std::weak_ptr<Subscriber> subscriber ) const;

    */

    void load( const ConsolidatingTIDSet& toLoad ) throw( ARQ::ARQException );

    MarketSnapshot snap() const;

    // --- Methods for FXRate (FXR) ---
    [[nodiscard]] std::optional<MDEntities::FXRate> getFXRate( const std::string_view ID ) const { return m_mkt.getFXRate( ID ); }
    void setFXRate( const MDEntities::FXRate& newObj ) { m_mkt.setFXRate( newObj ); }
    void onFXRateUpdate( const MDEntities::FXRate& updatedObj );

    // --- Methods for EQPrice (EQP) ---
    [[nodiscard]] std::optional<MDEntities::EQPrice> getEQPrice( const std::string_view ID ) const { return m_mkt.getEQPrice( ID ); }
    void setEQPrice( const MDEntities::EQPrice& newObj ) { m_mkt.setEQPrice( newObj ); }
    void onEQPriceUpdate( const MDEntities::EQPrice& updatedObj );

};

// Extend ManagedMarket with SWIG-friendly subscription methods
%extend ManagedMarket
{
    void subscribe( std::shared_ptr<VirtualSubscriber> subscriber, const ConsolidatingTIDSet& subscriptionList )
    {
        $self->subscribe(subscriber, subscriptionList);
    }

    void subscribeAndLoad( std::shared_ptr<VirtualSubscriber> subscriber, const ConsolidatingTIDSet& subscriptionList )
    {
        $self->subscribeAndLoad(subscriber, subscriptionList);
    }

    void unsubscribe( std::shared_ptr<VirtualSubscriber> subscriber )
    {
        $self->unsubscribe(subscriber);
    }

    void unsubscribe( std::shared_ptr<VirtualSubscriber> subscriber, const ConsolidatingTIDSet& subscriptionList )
    {
        $self->unsubscribe(subscriber, subscriptionList);
    }

    bool isSubscriber( std::shared_ptr<VirtualSubscriber> subscriber ) const
    {
        return $self->isSubscriber(subscriber);
    }
}

}
}

#endif