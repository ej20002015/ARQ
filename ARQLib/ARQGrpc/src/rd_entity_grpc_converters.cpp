// THIS FILE IS AUTO-GENERATED BY THE CODE-GEN SCRIPT. DO NOT EDIT.
// Contains function definitions to convert between RDEntity structs and their gRPC representations.

#pragma once
#include <ARQGrpc/rd_entity_grpc_converters.h>

namespace ARQ
{
namespace Grpc
{
namespace RefData
{

// --- Converters for Currency (CCY) ---

void toGrpc( const RDEntities::Currency& arqEntity, Currency* const grpcEntity )
{
    grpcEntity->set__is_active( arqEntity._isActive );
    grpcEntity->set__last_updated_ts( arqEntity._lastUpdatedTs.microsecondsSinceEpoch() );
    grpcEntity->set__last_updated_by( arqEntity._lastUpdatedBy );
    grpcEntity->set__version( arqEntity._version );
    CurrencyPayload* const payload = grpcEntity->mutable_payload();
    toGrpcPayload( arqEntity, payload );
}

void toGrpc( RDEntities::Currency&& arqEntity, Currency* const grpcEntity )
{
    grpcEntity->set__is_active( arqEntity._isActive );
    grpcEntity->set__last_updated_ts( arqEntity._lastUpdatedTs.microsecondsSinceEpoch() );
    grpcEntity->set__last_updated_by( std::move( arqEntity._lastUpdatedBy ) );
    grpcEntity->set__version( arqEntity._version );
    CurrencyPayload* const payload = grpcEntity->mutable_payload();
    toGrpcPayload( arqEntity, payload );
}

void toGrpcPayload( const RDEntities::Currency& arqEntity, CurrencyPayload* const grpcEntityPayload )
{
    grpcEntityPayload->set_ccy_id( arqEntity.ccyID );
    grpcEntityPayload->set_name( arqEntity.name );
    grpcEntityPayload->set_decimal_places( arqEntity.decimalPlaces );
    grpcEntityPayload->set_settlement_days( arqEntity.settlementDays );
}

void toGrpcPayload( RDEntities::Currency&& arqEntity, CurrencyPayload* const grpcEntityPayload )
{
    grpcEntityPayload->set_ccy_id( std::move( arqEntity.ccyID ) );
    grpcEntityPayload->set_name( std::move( arqEntity.name ) );
    grpcEntityPayload->set_decimal_places( arqEntity.decimalPlaces );
    grpcEntityPayload->set_settlement_days( arqEntity.settlementDays );
}

RDEntities::Currency fromGrpc( const Currency& grpcEntity )
{
    const CurrencyPayload& payload = grpcEntity.payload();
    RDEntities::Currency arqEntity = fromGrpcPayload( payload );
    arqEntity._isActive = grpcEntity._is_active();
    arqEntity._lastUpdatedTs = Time::DateTime( Time::Microseconds( grpcEntity._last_updated_ts() ) );
    arqEntity._lastUpdatedBy = grpcEntity._last_updated_by();
    arqEntity._version = grpcEntity._version();
    return arqEntity;
}

RDEntities::Currency fromGrpc( Currency&& grpcEntity )
{
    CurrencyPayload* const payload = grpcEntity.mutable_payload();
    RDEntities::Currency arqEntity = fromGrpcPayload( std::move( *payload ) );
    arqEntity._isActive = grpcEntity._is_active();
    arqEntity._lastUpdatedTs = Time::DateTime( Time::Microseconds( grpcEntity._last_updated_ts() ) );
    arqEntity._lastUpdatedBy = std::move( *grpcEntity.mutable__last_updated_by() );
    arqEntity._version = grpcEntity._version();
    return arqEntity;
}

RDEntities::Currency fromGrpcPayload( const CurrencyPayload& grpcEntityPayload )
{
    RDEntities::Currency arqEntity;
    arqEntity.ccyID = grpcEntityPayload.ccy_id();
    arqEntity.name = grpcEntityPayload.name();
    arqEntity.decimalPlaces = grpcEntityPayload.decimal_places();
    arqEntity.settlementDays = grpcEntityPayload.settlement_days();
    return arqEntity;
}

RDEntities::Currency fromGrpcPayload( CurrencyPayload&& grpcEntityPayload )
{
    RDEntities::Currency arqEntity;
    arqEntity.ccyID = std::move( *grpcEntityPayload.mutable_ccy_id() );
    arqEntity.name = std::move( *grpcEntityPayload.mutable_name() );
    arqEntity.decimalPlaces = grpcEntityPayload.decimal_places();
    arqEntity.settlementDays = grpcEntityPayload.settlement_days();
    return arqEntity;
}

// --- Converters for User (USER) ---

void toGrpc( const RDEntities::User& arqEntity, User* const grpcEntity )
{
    grpcEntity->set__is_active( arqEntity._isActive );
    grpcEntity->set__last_updated_ts( arqEntity._lastUpdatedTs.microsecondsSinceEpoch() );
    grpcEntity->set__last_updated_by( arqEntity._lastUpdatedBy );
    grpcEntity->set__version( arqEntity._version );
    UserPayload* const payload = grpcEntity->mutable_payload();
    toGrpcPayload( arqEntity, payload );
}

void toGrpc( RDEntities::User&& arqEntity, User* const grpcEntity )
{
    grpcEntity->set__is_active( arqEntity._isActive );
    grpcEntity->set__last_updated_ts( arqEntity._lastUpdatedTs.microsecondsSinceEpoch() );
    grpcEntity->set__last_updated_by( std::move( arqEntity._lastUpdatedBy ) );
    grpcEntity->set__version( arqEntity._version );
    UserPayload* const payload = grpcEntity->mutable_payload();
    toGrpcPayload( arqEntity, payload );
}

void toGrpcPayload( const RDEntities::User& arqEntity, UserPayload* const grpcEntityPayload )
{
    grpcEntityPayload->set_user_id( arqEntity.userID );
    grpcEntityPayload->set_full_name( arqEntity.fullName );
    grpcEntityPayload->set_email( arqEntity.email );
    grpcEntityPayload->set_trading_desk( arqEntity.tradingDesk );
}

void toGrpcPayload( RDEntities::User&& arqEntity, UserPayload* const grpcEntityPayload )
{
    grpcEntityPayload->set_user_id( std::move( arqEntity.userID ) );
    grpcEntityPayload->set_full_name( std::move( arqEntity.fullName ) );
    grpcEntityPayload->set_email( std::move( arqEntity.email ) );
    grpcEntityPayload->set_trading_desk( std::move( arqEntity.tradingDesk ) );
}

RDEntities::User fromGrpc( const User& grpcEntity )
{
    const UserPayload& payload = grpcEntity.payload();
    RDEntities::User arqEntity = fromGrpcPayload( payload );
    arqEntity._isActive = grpcEntity._is_active();
    arqEntity._lastUpdatedTs = Time::DateTime( Time::Microseconds( grpcEntity._last_updated_ts() ) );
    arqEntity._lastUpdatedBy = grpcEntity._last_updated_by();
    arqEntity._version = grpcEntity._version();
    return arqEntity;
}

RDEntities::User fromGrpc( User&& grpcEntity )
{
    UserPayload* const payload = grpcEntity.mutable_payload();
    RDEntities::User arqEntity = fromGrpcPayload( std::move( *payload ) );
    arqEntity._isActive = grpcEntity._is_active();
    arqEntity._lastUpdatedTs = Time::DateTime( Time::Microseconds( grpcEntity._last_updated_ts() ) );
    arqEntity._lastUpdatedBy = std::move( *grpcEntity.mutable__last_updated_by() );
    arqEntity._version = grpcEntity._version();
    return arqEntity;
}

RDEntities::User fromGrpcPayload( const UserPayload& grpcEntityPayload )
{
    RDEntities::User arqEntity;
    arqEntity.userID = grpcEntityPayload.user_id();
    arqEntity.fullName = grpcEntityPayload.full_name();
    arqEntity.email = grpcEntityPayload.email();
    arqEntity.tradingDesk = grpcEntityPayload.trading_desk();
    return arqEntity;
}

RDEntities::User fromGrpcPayload( UserPayload&& grpcEntityPayload )
{
    RDEntities::User arqEntity;
    arqEntity.userID = std::move( *grpcEntityPayload.mutable_user_id() );
    arqEntity.fullName = std::move( *grpcEntityPayload.mutable_full_name() );
    arqEntity.email = std::move( *grpcEntityPayload.mutable_email() );
    arqEntity.tradingDesk = std::move( *grpcEntityPayload.mutable_trading_desk() );
    return arqEntity;
}

}
}
}