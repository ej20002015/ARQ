# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    env:
      swig_version: 4.3.1

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/.build" >> "$GITHUB_OUTPUT"

    - name: Install SWIG (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        Invoke-WebRequest -UserAgent "Wget" -Uri https://sourceforge.net/projects/swig/files/swigwin/swigwin-${{ env.swig_version }}/swigwin-${{ env.swig_version }}.zip/download -OutFile $env:USERPROFILE'\Downloads\SWIG${{ env.swig_version }}.zip'
        Expand-Archive $env:USERPROFILE'\Downloads\SWIG${{ env.swig_version }}.zip' D:\a\Dependencies\swig
        D:\a\Dependencies\swig\swigwin-${{ env.swig_version }}\swig.exe -version

        # Set environment variables for later steps (using forward slashes for bash compatibility)
        echo "SWIG_EXECUTABLE=D:/a/Dependencies/swig/swigwin-${{ env.swig_version }}/swig.exe" >> $env:GITHUB_ENV
        echo "SWIG_DIR=D:/a/Dependencies/swig/swigwin-${{ env.swig_version }}/Lib" >> $env:GITHUB_ENV
      
    - name: Install SWIG (Linux)
      if: matrix.os == 'ubuntu-latest'
      shell: bash
      run: |
        sudo apt-get update
        sudo DEBIAN_FRONTEND=noninteractive apt-get install -y libpcre2-dev
        
        mkdir -p ~/downloads && cd ~/downloads
        wget http://downloads.sourceforge.net/project/swig/swig/swig-${{ env.swig_version }}/swig-${{ env.swig_version }}.tar.gz
        tar xfz swig-${{ env.swig_version }}.tar.gz
        rm swig-${{ env.swig_version }}.tar.gz
        cd swig-${{ env.swig_version }}
        ./configure
        make -j 4 && sudo make install
        cd .. && rm -rf swig-${{ env.swig_version }}
        
        # Verify installation
        swig -version

    - name: Set up Java
      uses: actions/setup-java@v3
      with:
        java-version: '21.0.6'
        distribution: 'oracle'

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      shell: bash
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        ${{ matrix.os == 'ubuntu-latest' && '-G "Ninja Multi-Config"' || '' }}
        ${{ matrix.os == 'windows-latest' && '-DSWIG_EXECUTABLE="${{ env.SWIG_EXECUTABLE }}" -DSWIG_DIR="${{ env.SWIG_DIR }}"' || '' }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }} --output-on-failure -C ${{ matrix.build_type }}
