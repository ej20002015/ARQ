// THIS FILE IS AUTO-GENERATED BY THE CODE-GEN SCRIPT. DO NOT EDIT.
// Contains C++ definitions for Reference Data entities.

#pragma once

#include <string>
#include <chrono>
#include <cstdint>
#include <concepts>
#include <string_view>
#include <array>
#include <utility>
#include <optional>

namespace TMQ
{
namespace RDEntities
{

/*
********************************************
* Base Class and Traits for Reference Data *
********************************************
*/

// Base struct for all reference data entities
struct RDEntity
{
    bool _isActive = true;
    std::chrono::system_clock::time_point _lastUpdatedTs;
    std::string _lastUpdatedBy;
};

template<typename T>
concept c_RDEntity = std::is_base_of_v<RDEntity, T>;

// Traits class to get compile-time metadata about an entity
template<c_RDEntity T>
class Traits
{
public:
    static consteval std::string_view const name()      { static_assert( false, "Missing RDEntities::Traits specialization for this type" ); return ""; }
    static consteval std::string_view const type()      { static_assert( false, "Missing RDEntities::Traits specialization for this type" ); return ""; }
    static consteval std::string_view const tableName() { static_assert( false, "Missing RDEntities::Traits specialization for this type" ); return ""; }
    static consteval std::string_view const key()       { static_assert( false, "Missing RDEntities::Traits specialization for this type" ); return ""; }
};

struct MemberInfo
{
    const std::string_view name;           // Name of the C++ member variable
    const std::string_view comment;        // Documentation string
    const std::string_view type;           // The language agnostic type as a string
    const std::string_view cppType;        // The C++ type as a string
    const std::string_view clickhouseType; // The ClickHouse type as a string
    const std::string_view flatbufferType; // The FlatBuffers type as a string
};

/*
********************************************
*            Entity Definitions            *
********************************************
*/


/// Represents an ISO 4217 currency and its conventions.
struct Currency : public RDEntity
{
    /// The 3-letter ISO 4217 currency code (e.g., USD).
    std::string ccyID;
    /// The full currency name (e.g., US Dollar).
    std::string name;
    /// Number of decimal places for standard formatting.
    uint8_t decimalPlaces;
    /// Standard number of days for spot settlement (commonly 2).
    uint8_t settlementDays;
};

// Traits specialization for Currency
template<>
class Traits<Currency>
{
public:
    static consteval std::string_view const name()      { return "Currency"; }
    static consteval std::string_view const type()      { return "CCY"; }
    static consteval std::string_view const tableName() { return "Currencies"; }
    static consteval std::string_view const key()       { return "ccyID"; }

    using KeyType = std::string;

    // A compile-time array holding metadata for all members.
    static constexpr std::array<MemberInfo, 4> membersInfo =
    {
        MemberInfo {
            /*name            = */ "ccyID",
            /*comment         = */ "The 3-letter ISO 4217 currency code (e.g., USD).",
            /*type            = */ "string",
            /*cpp_type        = */ "std::string",
            /*clickhouse_type = */ "String",
            /*flatbuffer_type = */ "string"
        },
        MemberInfo {
            /*name            = */ "name",
            /*comment         = */ "The full currency name (e.g., US Dollar).",
            /*type            = */ "string",
            /*cpp_type        = */ "std::string",
            /*clickhouse_type = */ "String",
            /*flatbuffer_type = */ "string"
        },
        MemberInfo {
            /*name            = */ "decimalPlaces",
            /*comment         = */ "Number of decimal places for standard formatting.",
            /*type            = */ "uint8",
            /*cpp_type        = */ "uint8_t",
            /*clickhouse_type = */ "UInt8",
            /*flatbuffer_type = */ "ubyte"
        },
        MemberInfo {
            /*name            = */ "settlementDays",
            /*comment         = */ "Standard number of days for spot settlement (commonly 2).",
            /*type            = */ "uint8",
            /*cpp_type        = */ "uint8_t",
            /*clickhouse_type = */ "UInt8",
            /*flatbuffer_type = */ "ubyte"
        }    
    };

    // A compile-time helper function to look up info for a specific member.
    static consteval std::optional<MemberInfo> getMemberInfo( const std::string_view memberName )
    {
        for( const auto& info : membersInfo )
        {
            if( info.name == memberName )
                return info;
        }
        return std::nullopt;
    }
};


/// Represents an individual user of the system.
struct User : public RDEntity
{
    /// The unique system user ID.
    std::string userID;
    /// The user's full name for display purposes.
    std::string fullName;
    /// The user's contact email address.
    std::string email;
    /// The primary trading desk the user belongs to.
    std::string tradingDesk;
};

// Traits specialization for User
template<>
class Traits<User>
{
public:
    static consteval std::string_view const name()      { return "User"; }
    static consteval std::string_view const type()      { return "USER"; }
    static consteval std::string_view const tableName() { return "Users"; }
    static consteval std::string_view const key()       { return "userID"; }

    using KeyType = std::string;

    // A compile-time array holding metadata for all members.
    static constexpr std::array<MemberInfo, 4> membersInfo =
    {
        MemberInfo {
            /*name            = */ "userID",
            /*comment         = */ "The unique system user ID.",
            /*type            = */ "string",
            /*cpp_type        = */ "std::string",
            /*clickhouse_type = */ "String",
            /*flatbuffer_type = */ "string"
        },
        MemberInfo {
            /*name            = */ "fullName",
            /*comment         = */ "The user's full name for display purposes.",
            /*type            = */ "string",
            /*cpp_type        = */ "std::string",
            /*clickhouse_type = */ "String",
            /*flatbuffer_type = */ "string"
        },
        MemberInfo {
            /*name            = */ "email",
            /*comment         = */ "The user's contact email address.",
            /*type            = */ "string",
            /*cpp_type        = */ "std::string",
            /*clickhouse_type = */ "String",
            /*flatbuffer_type = */ "string"
        },
        MemberInfo {
            /*name            = */ "tradingDesk",
            /*comment         = */ "The primary trading desk the user belongs to.",
            /*type            = */ "string",
            /*cpp_type        = */ "std::string",
            /*clickhouse_type = */ "String",
            /*flatbuffer_type = */ "string"
        }    
    };

    // A compile-time helper function to look up info for a specific member.
    static consteval std::optional<MemberInfo> getMemberInfo( const std::string_view memberName )
    {
        for( const auto& info : membersInfo )
        {
            if( info.name == memberName )
                return info;
        }
        return std::nullopt;
    }
};

}
}