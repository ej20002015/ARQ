// THIS FILE IS AUTO-GENERATED BY THE CODE-GEN SCRIPT. DO NOT EDIT.
// Contains the full implementation of the CHRefDataSource class.

#include <TMQClickHouse/ch_refdata_source_interface.h>

#include <TMQUtils/error.h>
#include <TMQUtils/instr.h>
#include <TMQCore/logger.h>

#include "connection.h"

#include <clickhouse/client.h>

namespace TMQ
{


// --- Implementation for Currency ---

std::vector<RDEntities::Currency> CHRefDataSource::fetchLatestCurrencies()
{
    CHConn conn;

    std::vector<RDEntities::Currency> results;

    Instr::Timer tm;

    static constexpr auto SELECT_STMT = R"(
		SELECT
            ccyID,
            argMax(Name, _LastUpdatedTs) AS max_Name,
            argMax(DecimalPlaces, _LastUpdatedTs) AS max_DecimalPlaces,
            argMax(SettlementDays, _LastUpdatedTs) AS max_SettlementDays,
            argMax(_IsActive, _LastUpdatedTs) AS max_IsActive,
            max(_LastUpdatedTs) AS max_LastUpdatedTs,
            argMax(_LastUpdatedBy, _LastUpdatedTs) AS max_LastUpdatedBy
		FROM RefData.Currencies
        GROUP BY ccyID
		HAVING max_IsActive = 1;
	)";

    try
    {
        conn.client().Select( SELECT_STMT, [&] ( const clickhouse::Block& block )
        {
            if( block.GetRowCount() == 0 )
                return; // End of data

            auto col_ccyID = block[0]->As<clickhouse::ColumnString>();
            auto col_name = block[1]->As<clickhouse::ColumnString>();
            auto col_decimalPlaces = block[2]->As<clickhouse::ColumnUInt8>();
            auto col_settlementDays = block[3]->As<clickhouse::ColumnUInt8>();
            auto col_isActive = block[4]->As<clickhouse::ColumnUInt8>();
            auto col_lastUpdatedTs = block[5]->As<clickhouse::ColumnDateTime64>();
            auto col_lastUpdatedBy = block[6]->As<clickhouse::ColumnString>();

            results.reserve( results.size() + block.GetRowCount() );
            for( size_t i = 0; i < block.GetRowCount(); ++i )
            {
                RDEntities::Currency obj;
                obj.ccyID = col_ccyID->At( i );
                obj.name = col_name->At( i );
                obj.decimalPlaces = col_decimalPlaces->At( i );
                obj.settlementDays = col_settlementDays->At( i );
                obj._isActive = col_isActive->At( i );
                obj._lastUpdatedTs = Time::longToTp( static_cast<uint64_t>( col_lastUpdatedTs->At( i ) ) );
                obj._lastUpdatedBy = col_lastUpdatedTs->At( i );
                results.push_back( std::move( obj ) );
            }
        } );
    }
    catch( const std::exception& e )
    {
        throw TMQException( std::format( "Error executing ClickHouse SELECT query: {}", e.what() ) );
    }

    Log( Module::CLICKHOUSE ).debug( "Ran ClickHouse select query in {}", tm.duration() );

    return results;
}

// TODO: Need to implement fetchAsOfCurrencies in a similar manner
// TODO: Need to create some audit load capability

[[nodiscard]] std::vector<RDEntities::Currency> CHRefDataSource::fetchAsOfCurrencies( std::chrono::system_clock::time_point asof )
{
    return std::vector<RDEntities::Currency>();
}

void CHRefDataSource::insertCurrencies( const std::vector<RDEntities::Currency>& data )
{
    CHConn conn;

    Instr::Timer tm;

    try
    {
        auto col_ccyID = std::make_shared<clickhouse::ColumnString>();
        auto col_name = std::make_shared<clickhouse::ColumnString>();
        auto col_decimalPlaces = std::make_shared<clickhouse::ColumnUInt8>();
        auto col_settlementDays = std::make_shared<clickhouse::ColumnUInt8>();
        auto col_isActive = std::make_shared<clickhouse::ColumnUInt8>();
        // col_lastUpdatedTs is set to current time in ClickHouse, so we don't need to set it here
        auto col_lastUpdatedBy = std::make_shared<clickhouse::ColumnString>(); // TODO: Maybe set this to the current user?

        for( const auto& obj : data )
        {
            col_ccyID->Append( obj.ccyID );
            col_name->Append( obj.name );
            col_decimalPlaces->Append( obj.decimalPlaces );
            col_settlementDays->Append( obj.settlementDays );
            col_isActive->Append( obj._isActive );
            col_lastUpdatedBy->Append( obj._lastUpdatedBy );
        }

        clickhouse::Block block;
        block.AppendColumn( "CcyID", col_ccyID );
        block.AppendColumn( "Name", col_name );
        block.AppendColumn( "DecimalPlaces", col_decimalPlaces );
        block.AppendColumn( "SettlementDays", col_settlementDays );
        block.AppendColumn( "_IsActive", col_isActive );
        block.AppendColumn( "_LastUpdatedBy", col_lastUpdatedBy );

        conn.client().Insert( "RefData.Currencies", block );
    }
    catch( const std::exception& e )
    {
        throw TMQException( std::format( "Error executing ClickHouse INSERT query: {0}", e.what() ) );
    }

    Log( Module::CLICKHOUSE ).debug( "Ran ClickHouse insert query in {}", tm.duration() );
}

// --- Implementation for User ---

std::vector<RDEntities::User> CHRefDataSource::fetchLatestUsers()
{
    CHConn conn;

    std::vector<RDEntities::User> results;

    Instr::Timer tm;

    static constexpr auto SELECT_STMT = R"(
		SELECT
            userID,
            argMax(FullName, _LastUpdatedTs) AS max_FullName,
            argMax(Email, _LastUpdatedTs) AS max_Email,
            argMax(TradingDesk, _LastUpdatedTs) AS max_TradingDesk,
            argMax(_IsActive, _LastUpdatedTs) AS max_IsActive,
            max(_LastUpdatedTs) AS max_LastUpdatedTs,
            argMax(_LastUpdatedBy, _LastUpdatedTs) AS max_LastUpdatedBy
		FROM RefData.Users
        GROUP BY userID
		HAVING max_IsActive = 1;
	)";

    try
    {
        conn.client().Select( SELECT_STMT, [&] ( const clickhouse::Block& block )
        {
            if( block.GetRowCount() == 0 )
                return; // End of data

            auto col_userID = block[0]->As<clickhouse::ColumnString>();
            auto col_fullName = block[1]->As<clickhouse::ColumnString>();
            auto col_email = block[2]->As<clickhouse::ColumnString>();
            auto col_tradingDesk = block[3]->As<clickhouse::ColumnString>();
            auto col_isActive = block[4]->As<clickhouse::ColumnUInt8>();
            auto col_lastUpdatedTs = block[5]->As<clickhouse::ColumnDateTime64>();
            auto col_lastUpdatedBy = block[6]->As<clickhouse::ColumnString>();

            results.reserve( results.size() + block.GetRowCount() );
            for( size_t i = 0; i < block.GetRowCount(); ++i )
            {
                RDEntities::User obj;
                obj.userID = col_userID->At( i );
                obj.fullName = col_fullName->At( i );
                obj.email = col_email->At( i );
                obj.tradingDesk = col_tradingDesk->At( i );
                obj._isActive = col_isActive->At( i );
                obj._lastUpdatedTs = Time::longToTp( static_cast<uint64_t>( col_lastUpdatedTs->At( i ) ) );
                obj._lastUpdatedBy = col_lastUpdatedTs->At( i );
                results.push_back( std::move( obj ) );
            }
        } );
    }
    catch( const std::exception& e )
    {
        throw TMQException( std::format( "Error executing ClickHouse SELECT query: {}", e.what() ) );
    }

    Log( Module::CLICKHOUSE ).debug( "Ran ClickHouse select query in {}", tm.duration() );

    return results;
}

// TODO: Need to implement fetchAsOfUsers in a similar manner
// TODO: Need to create some audit load capability

[[nodiscard]] std::vector<RDEntities::User> CHRefDataSource::fetchAsOfUsers( std::chrono::system_clock::time_point asof )
{
    return std::vector<RDEntities::User>();
}

void CHRefDataSource::insertUsers( const std::vector<RDEntities::User>& data )
{
    CHConn conn;

    Instr::Timer tm;

    try
    {
        auto col_userID = std::make_shared<clickhouse::ColumnString>();
        auto col_fullName = std::make_shared<clickhouse::ColumnString>();
        auto col_email = std::make_shared<clickhouse::ColumnString>();
        auto col_tradingDesk = std::make_shared<clickhouse::ColumnString>();
        auto col_isActive = std::make_shared<clickhouse::ColumnUInt8>();
        // col_lastUpdatedTs is set to current time in ClickHouse, so we don't need to set it here
        auto col_lastUpdatedBy = std::make_shared<clickhouse::ColumnString>(); // TODO: Maybe set this to the current user?

        for( const auto& obj : data )
        {
            col_userID->Append( obj.userID );
            col_fullName->Append( obj.fullName );
            col_email->Append( obj.email );
            col_tradingDesk->Append( obj.tradingDesk );
            col_isActive->Append( obj._isActive );
            col_lastUpdatedBy->Append( obj._lastUpdatedBy );
        }

        clickhouse::Block block;
        block.AppendColumn( "UserID", col_userID );
        block.AppendColumn( "FullName", col_fullName );
        block.AppendColumn( "Email", col_email );
        block.AppendColumn( "TradingDesk", col_tradingDesk );
        block.AppendColumn( "_IsActive", col_isActive );
        block.AppendColumn( "_LastUpdatedBy", col_lastUpdatedBy );

        conn.client().Insert( "RefData.Users", block );
    }
    catch( const std::exception& e )
    {
        throw TMQException( std::format( "Error executing ClickHouse INSERT query: {0}", e.what() ) );
    }

    Log( Module::CLICKHOUSE ).debug( "Ran ClickHouse insert query in {}", tm.duration() );
}


}