// THIS FILE IS AUTO-GENERATED BY THE CODE-GEN SCRIPT. DO NOT EDIT.
// Defines functions for Reference Data serialisation.

#include <TMQSerialisation/ser_refdata_entities.h>

#include <TMQUtils/time.h>

#include <flatbuffers/flatbuffers.h>

namespace TMQ
{

// --- Implementation for Currency ---

RDEntities::Currency deserialiseCurrency( const fbs::CurrencyPayload& payload )
{
    RDEntities::Currency obj = {
		payload.isActive(),
        Time::DateTime(),
		"",
        payload.ccyID()->c_str(),
        payload.name()->c_str(),
        payload.decimalPlaces(),
        payload.settlementDays()
    };

    return obj;
}

Buffer serialiseCurrency( const RDEntities::Currency& entity )
{
    flatbuffers::FlatBufferBuilder builder;
    flatbuffers::Offset<void> payloadOffset;

    const auto ccyIDOffset = builder.CreateString( entity.ccyID );
    const auto nameOffset = builder.CreateString( entity.name );

    payloadOffset = fbs::CreateCurrencyPayload(
        builder,
        ccyIDOffset,
        nameOffset,
        entity.decimalPlaces,
        entity.settlementDays,
        entity._isActive
    ).Union();

    auto rootTable = fbs::CreateRefDataUpdate(
        builder,
        fbs::AllRefDataPayloads_CurrencyPayload,
        payloadOffset
    );

    builder.Finish( rootTable );
    const uint8_t* const buffer = builder.GetBufferPointer();
    const size_t size = builder.GetSize();
    return Buffer( buffer, size );
}

// --- Implementation for User ---

RDEntities::User deserialiseUser( const fbs::UserPayload& payload )
{
    RDEntities::User obj = {
		payload.isActive(),
        Time::DateTime(),
		"",
        payload.userID()->c_str(),
        payload.fullName()->c_str(),
        payload.email()->c_str(),
        payload.tradingDesk()->c_str()
    };

    return obj;
}

Buffer serialiseUser( const RDEntities::User& entity )
{
    flatbuffers::FlatBufferBuilder builder;
    flatbuffers::Offset<void> payloadOffset;

    const auto userIDOffset = builder.CreateString( entity.userID );
    const auto fullNameOffset = builder.CreateString( entity.fullName );
    const auto emailOffset = builder.CreateString( entity.email );
    const auto tradingDeskOffset = builder.CreateString( entity.tradingDesk );

    payloadOffset = fbs::CreateUserPayload(
        builder,
        userIDOffset,
        fullNameOffset,
        emailOffset,
        tradingDeskOffset,
        entity._isActive
    ).Union();

    auto rootTable = fbs::CreateRefDataUpdate(
        builder,
        fbs::AllRefDataPayloads_UserPayload,
        payloadOffset
    );

    builder.Finish( rootTable );
    const uint8_t* const buffer = builder.GetBufferPointer();
    const size_t size = builder.GetSize();
    return Buffer( buffer, size );
}

}