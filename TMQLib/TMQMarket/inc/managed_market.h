// THIS FILE IS AUTO-GENERATED BY THE CODE-GEN SCRIPT. DO NOT EDIT.
// Defines the ManagedMarket class, which manages subscriptions to market data updates.

#pragma once
#include <TMQMarket/dll.h>

#include <TMQMarket/market.h>

#include <map>
#include <vector>
#include <functional>
#include <shared_mutex>

namespace TMQ
{
namespace Mkt
{

class ManagedMarket;

class Subscriber
{
public:
    using OnMktObjUpdateFunc = std::function<void( const MDEntities::Type type, const std::string_view ID )>;
    
    using OnFXRateUpdateFunc = std::function<void( const MDEntities::FXRate& updatedObj )>;
    using OnEQPriceUpdateFunc = std::function<void( const MDEntities::EQPrice& updatedObj )>;

public:
    virtual ~Subscriber() = default;

    TMQMarket_API virtual const std::string_view description() const = 0;

    void setOnMktObjUpdateFunc( OnMktObjUpdateFunc&& onMktObjUpdateFunc );

    void setOnFXRateUpdateFunc( OnFXRateUpdateFunc&& onFXRateUpdateFunc );
    void setOnEQPriceUpdateFunc( OnEQPriceUpdateFunc&& onEQPriceUpdateFunc );

private:
    std::shared_mutex m_mut;

    OnMktObjUpdateFunc m_onMktObjUpdateFunc;

    OnFXRateUpdateFunc m_onFXRateUpdateFunc;
    OnEQPriceUpdateFunc m_onEQPriceUpdateFunc;

private:
    friend class ManagedMarket;
};

class ManagedMarket
{
public:
    ManagedMarket( std::string_view dsh, const Mkt::Name& mktName )
        : m_dsh( dsh )
        , m_mktName( mktName )
    {}
    ManagedMarket( std::string_view dsh, const Mkt::Name& mktName, const MarketSnapshot& mktSnapshot )
        : m_dsh( dsh )
        , m_mktName( mktName )
        , m_mkt( mktSnapshot )
    {}

    TMQMarket_API void subscribe( const std::weak_ptr<Subscriber> subscriber, const ConsolidatingTIDSet& subscriptionList );
    TMQMarket_API void subscribeAndLoad( const std::weak_ptr<Subscriber> subscriber, const ConsolidatingTIDSet& subscriptionList );
    TMQMarket_API void unsubscribe( const std::weak_ptr<Subscriber> subscriber, const std::optional<std::reference_wrapper<ConsolidatingTIDSet>>& subscriptionList = std::nullopt );

    TMQMarket_API bool isSubscriber( const std::weak_ptr<Subscriber> subscriber ) const;

    TMQMarket_API void load( const ConsolidatingTIDSet& toLoad );

    // --- Methods for FXRate (FXR) ---
    [[nodiscard]] std::optional<MDEntities::FXRate> getFXRate( const std::string_view ID ) const { return m_mkt.getFXRate( ID ); }
    void setFXRate( const MDEntities::FXRate& newObj ) { m_mkt.setFXRate( newObj ); }
    TMQMarket_API void onFXRateUpdate( const MDEntities::FXRate& updatedObj );

    // --- Methods for EQPrice (EQP) ---
    [[nodiscard]] std::optional<MDEntities::EQPrice> getEQPrice( const std::string_view ID ) const { return m_mkt.getEQPrice( ID ); }
    void setEQPrice( const MDEntities::EQPrice& newObj ) { m_mkt.setEQPrice( newObj ); }
    TMQMarket_API void onEQPriceUpdate( const MDEntities::EQPrice& updatedObj );

private:
    template<MDEntities::c_MDEntity T>
    void sendMktUpdateToSubscribers( const T& updatedObj );

private:
    std::string_view m_dsh;
    Mkt::Name m_mktName;

    Market m_mkt;

    std::map<std::weak_ptr<Subscriber>, ConsolidatingTIDSet, std::owner_less<std::weak_ptr<Subscriber>>> m_subscriptions;
    mutable std::shared_mutex m_subMut;
};

}
}