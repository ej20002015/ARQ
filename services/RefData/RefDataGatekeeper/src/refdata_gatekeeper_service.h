// THIS FILE IS AUTO-GENERATED BY THE CODE-GEN SCRIPT. DO NOT EDIT.
// Contains gRPC service class for Reference Data Gatekeeper.

#pragma once

#include <ARQUtils/error.h>
#include <ARQCore/refdata_source.h>

#include <proto_gen/refdata_protobuf.grpc.pb.h>

#include "version_manager.h"

namespace ARQ
{
namespace Grpc
{
namespace RefData
{

class RefDataGatekeeperServiceImpl final : public RefDataGatekeeper::Service
{
public:
    RefDataGatekeeperServiceImpl() = default;

    void init();

    // --- Methods for Currency (CCY) ---
    grpc::Status UpsertCurrencies( grpc::ServerContext* context, const UpsertCurrenciesRequest* request, UpsertCurrenciesResponse* response ) override;
    grpc::Status DeactivateCurrencies( grpc::ServerContext* context, const DeactivateCurrenciesRequest* request, DeactivateCurrenciesResponse* response ) override;

    // --- Methods for User (USER) ---
    grpc::Status UpsertUsers( grpc::ServerContext* context, const UpsertUsersRequest* request, UpsertUsersResponse* response ) override;
    grpc::Status DeactivateUsers( grpc::ServerContext* context, const DeactivateUsersRequest* request, DeactivateUsersResponse* response ) override;

private:
    template<typename UpsertTraits>
    grpc::Status UpsertGeneric( grpc::ServerContext* context, const typename UpsertTraits::RequestType* request, typename UpsertTraits::ResponseType* response );

private:
    // For now, write directly to a data source instead of writing to a kafka log
    std::shared_ptr<RefDataSource> m_rdSource = RefDataSourceFactory::create( "ClickHouseDB" );
    std::shared_ptr<VersionManager> m_verMgr;
};

}
}
}