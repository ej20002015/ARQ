// THIS FILE IS AUTO-GENERATED BY THE CODE-GEN SCRIPT. DO NOT EDIT.
// Contains gRPC service class for Reference Data Reader.

#pragma once

#include <ARQUtils/error.h>
#include <ARQCore/refdata_source.h>

#include <proto_gen/refdata_protobuf.grpc.pb.h>

namespace ARQ
{
namespace Grpc
{
namespace RefData
{

class RefDataReaderServiceImpl final : public RefDataReader::Service
{
public:
    RefDataReaderServiceImpl( std::shared_ptr<RefDataSource> rdSource )
        : m_rdSource( std::move( rdSource ) )
    {
        if( !m_rdSource )
            throw ARQException( "RefDataReaderServiceImpl requires a valid RefDataSource instance" );
    }

    // --- Methods for Currency (CCY) ---
    grpc::Status GetCurrencies( grpc::ServerContext* context, const GetCurrenciesRequest* request, GetCurrenciesResponse* response ) override;
    grpc::Status GetCurrency( grpc::ServerContext* context, const GetCurrencyRequest* request, GetCurrencyResponse* response ) override;

    // --- Methods for User (USER) ---
    grpc::Status GetUsers( grpc::ServerContext* context, const GetUsersRequest* request, GetUsersResponse* response ) override;
    grpc::Status GetUser( grpc::ServerContext* context, const GetUserRequest* request, GetUserResponse* response ) override;

private:
    // For now, just read from the one data source (TODO: Have tiered data sources)
    std::shared_ptr<RefDataSource> m_rdSource;
};

}
}
}