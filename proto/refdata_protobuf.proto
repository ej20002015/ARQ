// THIS FILE IS AUTO-GENERATED BY THE CODE-GEN SCRIPT. DO NOT EDIT.
// Contains protobuf definitions for reference data structures and services.

syntax = "proto3";
package ARQ.Grpc.RefData;

/*
================== Entity Payload Messages ==================
*/

// Payload for a Currency object (entity minus the metadata).
message CurrencyPayload 
{
    string ccy_id = 1;
    string name = 2;
    uint32 decimal_places = 3;
    uint32 settlement_days = 4;
}

// A Currency object (contains metadata).
message Currency 
{
    CurrencyPayload payload = 1;

    bool _is_active = 2;
    uint32 _version = 3;
    uint64 _last_updated_ts = 4; // Using uint64 for timestamp (nanoseconds since epoch)
    string _last_updated_by = 5;
}

// Payload for a User object (entity minus the metadata).
message UserPayload 
{
    string user_id = 1;
    string full_name = 2;
    string email = 3;
    string trading_desk = 4;
}

// A User object (contains metadata).
message User 
{
    UserPayload payload = 1;

    bool _is_active = 2;
    uint32 _version = 3;
    uint64 _last_updated_ts = 4; // Using uint64 for timestamp (nanoseconds since epoch)
    string _last_updated_by = 5;
}


/*
================== Service Messages ==================
*/

// --- Messages for Currency (CCY) ---

message GetCurrenciesRequest {}

message GetCurrenciesResponse
{
    repeated Currency currencies = 1;
}

message GetCurrencyRequest 
{
    string ccy_id = 1;
}

message GetCurrencyResponse 
{
    bool found = 1;
    string message = 2; // Optional message, e.g. for not found reason

    Currency currency = 3;
}

message UpsertCurrenciesRequest
{
    message Item
    {
        // The full data for the Currency being created or updated.
        CurrencyPayload currency = 1;

        // The version the client thinks it's modifying.
        // For a new Currency, this should be 0.
        uint32 expected_version = 2;

        // TEMP: The user performing the update. Will be replaced by auth token metadata later on the server side.
        string updated_by = 3;
    }

    repeated Item items = 1;
}

message UpsertCurrenciesResponse
{
    message Item
    {
        bool success = 1;
        string message = 2;
    }

    // Overall success/failure of the batch operation.
    bool success = 1;
    string message = 2;

    // A list of results, one for each item in the request, in the same order.
    repeated Item items = 3;
}

message DeactivateCurrenciesRequest
{
    message Item
    {
        // We only need the ID of the Currency to deactivate it.
        string ccy_id = 1;

        // The version the client thinks it's modifying.
        uint32 expected_version = 2;

        // TEMP: The user performing the update. Will be replaced by auth token metadata later on the server side.
        string updated_by = 3;
    }

    // A list of deactivate requests to process in a batch.
    repeated Item items = 1;
}

message DeactivateCurrenciesResponse
{
    message Item
    {
        bool success = 1;
        string message = 2;
    }

    // Overall success/failure of the batch operation.
    bool success = 1;
    string message = 2;

    // A list of results, one for each item in the request, in the same order.
    repeated Item items = 3;
}

// --- Messages for User (USER) ---

message GetUsersRequest {}

message GetUsersResponse
{
    repeated User users = 1;
}

message GetUserRequest 
{
    string user_id = 1;
}

message GetUserResponse 
{
    bool found = 1;
    string message = 2; // Optional message, e.g. for not found reason

    User user = 3;
}

message UpsertUsersRequest
{
    message Item
    {
        // The full data for the User being created or updated.
        UserPayload user = 1;

        // The version the client thinks it's modifying.
        // For a new User, this should be 0.
        uint32 expected_version = 2;

        // TEMP: The user performing the update. Will be replaced by auth token metadata later on the server side.
        string updated_by = 3;
    }

    repeated Item items = 1;
}

message UpsertUsersResponse
{
    message Item
    {
        bool success = 1;
        string message = 2;
    }

    // Overall success/failure of the batch operation.
    bool success = 1;
    string message = 2;

    // A list of results, one for each item in the request, in the same order.
    repeated Item items = 3;
}

message DeactivateUsersRequest
{
    message Item
    {
        // We only need the ID of the User to deactivate it.
        string user_id = 1;

        // The version the client thinks it's modifying.
        uint32 expected_version = 2;

        // TEMP: The user performing the update. Will be replaced by auth token metadata later on the server side.
        string updated_by = 3;
    }

    // A list of deactivate requests to process in a batch.
    repeated Item items = 1;
}

message DeactivateUsersResponse
{
    message Item
    {
        bool success = 1;
        string message = 2;
    }

    // Overall success/failure of the batch operation.
    bool success = 1;
    string message = 2;

    // A list of results, one for each item in the request, in the same order.
    repeated Item items = 3;
}


/*
================== Service Definitions ==================
*/

// The service that handles all read-only queries.
service RefDataReader
{
    // --- Methods for Currency (CCY) ---
    rpc GetCurrencies(GetCurrenciesRequest) returns (GetCurrenciesResponse);
    rpc GetCurrency(GetCurrencyRequest) returns (GetCurrencyResponse);

    // --- Methods for User (USER) ---
    rpc GetUsers(GetUsersRequest) returns (GetUsersResponse);
    rpc GetUser(GetUserRequest) returns (GetUserResponse);

}

// The service that handles all write/modification commands.
service RefDataGatekeeper
{
    // --- Methods for Currency (CCY) ---
    rpc UpsertCurrencies(UpsertCurrenciesRequest) returns (UpsertCurrenciesResponse);
    rpc DeactivateCurrencies(DeactivateCurrenciesRequest) returns (DeactivateCurrenciesResponse);

    // --- Methods for User (USER) ---
    rpc UpsertUsers(UpsertUsersRequest) returns (UpsertUsersResponse);
    rpc DeactivateUsers(DeactivateUsersRequest) returns (DeactivateUsersResponse);

}